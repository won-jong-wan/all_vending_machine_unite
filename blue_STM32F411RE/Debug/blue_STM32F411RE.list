
blue_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc8  08005fc8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00006fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005fd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  2000006c  0800603c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  0800603c  00007afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dafc  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207c  00000000  00000000  00014b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00016c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  00017998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176aa  00000000  00000000  0001841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f087  00000000  00000000  0002fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905a2  00000000  00000000  0003eb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf0ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004300  00000000  00000000  000cf134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d3434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d98 	.word	0x08005d98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005d98 	.word	0x08005d98

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_UART_RxCpltCallback>:

uint32_t debug_tick = 0;

/**************************/
//callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if(rx_header >= BUFFER_LEN){
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80005ea:	d902      	bls.n	80005f2 <HAL_UART_RxCpltCallback+0x16>
		rx_header = 0;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	}
	if(rx_l_buf == '\r' || rx_l_buf == '\n'){
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_UART_RxCpltCallback+0x68>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b0d      	cmp	r3, #13
 80005f8:	d003      	beq.n	8000602 <HAL_UART_RxCpltCallback+0x26>
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_UART_RxCpltCallback+0x68>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d10a      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x3c>
		rx_flag = 1;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <HAL_UART_RxCpltCallback+0x6c>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
		rx_length = rx_header;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <HAL_UART_RxCpltCallback+0x70>)
 800060e:	6013      	str	r3, [r2, #0]
		rx_header = 0;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	e00a      	b.n	800062e <HAL_UART_RxCpltCallback+0x52>
	}else{
		blue_rx_buf[rx_header] = rx_l_buf;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <HAL_UART_RxCpltCallback+0x68>)
 800061e:	7811      	ldrb	r1, [r2, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <HAL_UART_RxCpltCallback+0x74>)
 8000622:	54d1      	strb	r1, [r2, r3]
		rx_header++;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <HAL_UART_RxCpltCallback+0x64>)
 800062c:	6013      	str	r3, [r2, #0]
	}

	HAL_UART_Receive_DMA(&huart6, (uint8_t*)&rx_l_buf, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	4904      	ldr	r1, [pc, #16]	@ (8000644 <HAL_UART_RxCpltCallback+0x68>)
 8000632:	4808      	ldr	r0, [pc, #32]	@ (8000654 <HAL_UART_RxCpltCallback+0x78>)
 8000634:	f003 fa32 	bl	8003a9c <HAL_UART_Receive_DMA>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000026c 	.word	0x2000026c
 8000644:	20000269 	.word	0x20000269
 8000648:	20000268 	.word	0x20000268
 800064c:	20000270 	.word	0x20000270
 8000650:	20000274 	.word	0x20000274
 8000654:	20000160 	.word	0x20000160

08000658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ECHO_Pin){
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000668:	d10f      	bne.n	800068a <HAL_GPIO_EXTI_Callback+0x32>
		echo_clk = htim1.Instance->CNT;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x40>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <HAL_GPIO_EXTI_Callback+0x44>)
 8000672:	6013      	str	r3, [r2, #0]
		if(echo_clk > 300) echo_clk = 300+trg_clk;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_GPIO_EXTI_Callback+0x44>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800067c:	d905      	bls.n	800068a <HAL_GPIO_EXTI_Callback+0x32>
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <HAL_GPIO_EXTI_Callback+0x44>)
 8000688:	6013      	str	r3, [r2, #0]
	}
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000088 	.word	0x20000088
 800069c:	20000340 	.word	0x20000340
 80006a0:	20000000 	.word	0x20000000

080006a4 <read_rx_buf>:

void read_rx_buf(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if(rx_flag == 1){
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <read_rx_buf+0x38>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d112      	bne.n	80006d6 <read_rx_buf+0x32>
		parse_order_string(blue_rx_buf);
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <read_rx_buf+0x3c>)
 80006b2:	f000 fb8f 	bl	8000dd4 <parse_order_string>
		memset(blue_rx_buf, 0, rx_length);
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <read_rx_buf+0x40>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <read_rx_buf+0x3c>)
 80006c0:	f004 fc4d 	bl	8004f5e <memset>
		all_count = get_total_quantity();
 80006c4:	f000 fc32 	bl	8000f2c <get_total_quantity>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <read_rx_buf+0x44>)
 80006ce:	701a      	strb	r2, [r3, #0]
		rx_flag = 0;
 80006d0:	4b02      	ldr	r3, [pc, #8]	@ (80006dc <read_rx_buf+0x38>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	}
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000268 	.word	0x20000268
 80006e0:	20000274 	.word	0x20000274
 80006e4:	20000270 	.word	0x20000270
 80006e8:	2000033c 	.word	0x2000033c

080006ec <measure_distance>:

void measure_distance(){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	  //flag
	if(echo_clk > trg_clk){
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <measure_distance+0x28>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <measure_distance+0x2c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d906      	bls.n	800070a <measure_distance+0x1e>
		d_clk = echo_clk - trg_clk;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <measure_distance+0x28>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <measure_distance+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <measure_distance+0x30>)
 8000708:	6013      	str	r3, [r2, #0]
	}
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	20000340 	.word	0x20000340
 8000718:	20000000 	.word	0x20000000
 800071c:	20000344 	.word	0x20000344

08000720 <detect_falling>:

void detect_falling(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	if(abs((d_clk - sonic_past)>dd_clk && sonic_past != 0) && (sonic_past > d_clk)){
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <detect_falling+0x60>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <detect_falling+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	2278      	movs	r2, #120	@ 0x78
 8000730:	4293      	cmp	r3, r2
 8000732:	d905      	bls.n	8000740 <detect_falling+0x20>
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <detect_falling+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <detect_falling+0x20>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <detect_falling+0x22>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d015      	beq.n	8000772 <detect_falling+0x52>
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <detect_falling+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <detect_falling+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d90f      	bls.n	8000772 <detect_falling+0x52>
		debug_past_clk = sonic_past;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <detect_falling+0x64>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <detect_falling+0x68>)
 8000758:	6013      	str	r3, [r2, #0]
		debug_now_clk = d_clk;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <detect_falling+0x60>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <detect_falling+0x6c>)
 8000760:	6013      	str	r3, [r2, #0]
		fall_detected = 1;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <detect_falling+0x70>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
		sonic_start_tick = HAL_GetTick();
 8000768:	f000 ff66 	bl	8001638 <HAL_GetTick>
 800076c:	4603      	mov	r3, r0
 800076e:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <detect_falling+0x74>)
 8000770:	6013      	str	r3, [r2, #0]
	}
	sonic_past = d_clk;
 8000772:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <detect_falling+0x60>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <detect_falling+0x64>)
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000344 	.word	0x20000344
 8000784:	2000034c 	.word	0x2000034c
 8000788:	20000354 	.word	0x20000354
 800078c:	20000358 	.word	0x20000358
 8000790:	20000350 	.word	0x20000350
 8000794:	20000348 	.word	0x20000348

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 fee6 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f890 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 fa8c 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a8:	f000 fa62 	bl	8000c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007ac:	f000 fa0c 	bl	8000bc8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007b0:	f000 fa34 	bl	8000c1c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80007b4:	f000 f8f0 	bl	8000998 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007b8:	f000 f990 	bl	8000adc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)&rx_l_buf, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	4937      	ldr	r1, [pc, #220]	@ (800089c <main+0x104>)
 80007c0:	4837      	ldr	r0, [pc, #220]	@ (80008a0 <main+0x108>)
 80007c2:	f003 f96b 	bl	8003a9c <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	4836      	ldr	r0, [pc, #216]	@ (80008a4 <main+0x10c>)
 80007ca:	f002 fb4b 	bl	8002e64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4835      	ldr	r0, [pc, #212]	@ (80008a8 <main+0x110>)
 80007d2:	f002 fb47 	bl	8002e64 <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = 0;
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <main+0x110>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_rx_buf();
 80007de:	f7ff ff61 	bl	80006a4 <read_rx_buf>
	  measure_distance();
 80007e2:	f7ff ff83 	bl	80006ec <measure_distance>
	  //sampling
	  if((HAL_GetTick() - sonic_start_tick) > sonic_d_tick){
 80007e6:	f000 ff27 	bl	8001638 <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	4b2f      	ldr	r3, [pc, #188]	@ (80008ac <main+0x114>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d901      	bls.n	80007fe <main+0x66>
		  detect_falling();
 80007fa:	f7ff ff91 	bl	8000720 <detect_falling>
	  }

	  if((all_count > 0) && (motor_flag != 1)){
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <main+0x118>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00e      	beq.n	8000824 <main+0x8c>
 8000806:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <main+0x11c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d00a      	beq.n	8000824 <main+0x8c>
		  motor_flag = 1;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <main+0x11c>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
		  motor_start_tick = HAL_GetTick();
 8000814:	f000 ff10 	bl	8001638 <HAL_GetTick>
 8000818:	4603      	mov	r3, r0
 800081a:	4a27      	ldr	r2, [pc, #156]	@ (80008b8 <main+0x120>)
 800081c:	6013      	str	r3, [r2, #0]
		  fall_detected = 0;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <main+0x124>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
	  }

	  debug_tick = HAL_GetTick();
 8000824:	f000 ff08 	bl	8001638 <HAL_GetTick>
 8000828:	4603      	mov	r3, r0
 800082a:	4a25      	ldr	r2, [pc, #148]	@ (80008c0 <main+0x128>)
 800082c:	6013      	str	r3, [r2, #0]

	  //active
	  if(motor_flag == 1){
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <main+0x11c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d1d3      	bne.n	80007de <main+0x46>
		  if((HAL_GetTick() - motor_start_tick) > motor_d_tick){
 8000836:	f000 feff 	bl	8001638 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <main+0x120>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000846:	4293      	cmp	r3, r2
 8000848:	d904      	bls.n	8000854 <main+0xbc>
			  htim2.Instance->CCR1 = 0;
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <main+0x110>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
 8000852:	e011      	b.n	8000878 <main+0xe0>
		  }
		  else if(motor_start_tick > HAL_GetTick()){
 8000854:	f000 fef0 	bl	8001638 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <main+0x120>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d205      	bcs.n	800086e <main+0xd6>
			  motor_start_tick = HAL_GetTick();
 8000862:	f000 fee9 	bl	8001638 <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <main+0x120>)
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e004      	b.n	8000878 <main+0xe0>
		  }else{
			  htim2.Instance->CCR1 = motor_duty;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <main+0x110>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
		  }
		  if(fall_detected == 1){
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <main+0x124>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d1ae      	bne.n	80007de <main+0x46>
			  htim2.Instance->CCR1 = 0;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <main+0x110>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2200      	movs	r2, #0
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
			  motor_flag = 0;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <main+0x11c>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
			  all_count--;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <main+0x118>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <main+0x118>)
 8000898:	701a      	strb	r2, [r3, #0]
	  read_rx_buf();
 800089a:	e7a0      	b.n	80007de <main+0x46>
 800089c:	20000269 	.word	0x20000269
 80008a0:	20000160 	.word	0x20000160
 80008a4:	20000088 	.word	0x20000088
 80008a8:	200000d0 	.word	0x200000d0
 80008ac:	20000348 	.word	0x20000348
 80008b0:	2000033c 	.word	0x2000033c
 80008b4:	20000360 	.word	0x20000360
 80008b8:	2000035c 	.word	0x2000035c
 80008bc:	20000350 	.word	0x20000350
 80008c0:	20000364 	.word	0x20000364

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb43 	bl	8004f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2310      	movs	r3, #16
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000934:	2308      	movs	r3, #8
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000938:	2364      	movs	r3, #100	@ 0x64
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fd4b 	bl	80023e4 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 fa38 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2103      	movs	r1, #3
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ffac 	bl	80028d4 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000982:	f000 fa21 	bl	8000dc8 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	@ 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	@ 0x58
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 fac4 	bl	8004f5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009d8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ad8 <MX_TIM1_Init+0x140>)
 80009da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80009dc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80009ea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f8:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b35      	ldr	r3, [pc, #212]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a04:	4833      	ldr	r0, [pc, #204]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a06:	f002 f985 	bl	8002d14 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f9da 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482c      	ldr	r0, [pc, #176]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a22:	f002 fb91 	bl	8003148 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a2c:	f000 f9cc 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a30:	4828      	ldr	r0, [pc, #160]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a32:	f002 f9be 	bl	8002db2 <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a3c:	f000 f9c4 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4821      	ldr	r0, [pc, #132]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a50:	f002 ff14 	bl	800387c <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a5a:	f000 f9b5 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 5;
 8000a62:	2305      	movs	r3, #5
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000a84:	f002 fa9e 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a8e:	f000 f99b 	bl	8000dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000ab6:	f002 ff4f 	bl	8003958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000ac0:	f000 f982 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MX_TIM1_Init+0x13c>)
 8000ac6:	f000 fab1 	bl	800102c <HAL_TIM_MspPostInit>

}
 8000aca:	bf00      	nop
 8000acc:	3758      	adds	r7, #88	@ 0x58
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000088 	.word	0x20000088
 8000ad8:	40010000 	.word	0x40010000

08000adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	@ 0x38
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b34:	4823      	ldr	r0, [pc, #140]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b36:	f002 f8ed 	bl	8002d14 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b40:	f000 f942 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b52:	f002 faf9 	bl	8003148 <HAL_TIM_ConfigClockSource>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b5c:	f000 f934 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b60:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b62:	f002 f926 	bl	8002db2 <HAL_TIM_PWM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b6c:	f000 f92c 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000b80:	f002 fe7c 	bl	800387c <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b8a:	f000 f91d 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	@ 0x60
 8000b90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000ba6:	f002 fa0d 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bb0:	f000 f90a 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <MX_TIM2_Init+0xe8>)
 8000bb6:	f000 fa39 	bl	800102c <HAL_TIM_MspPostInit>

}
 8000bba:	bf00      	nop
 8000bbc:	3738      	adds	r7, #56	@ 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000d0 	.word	0x200000d0

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <MX_USART2_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f002 fefc 	bl	80039fc <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f8dd 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000118 	.word	0x20000118
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <MX_USART6_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USART6_UART_Init+0x4c>)
 8000c54:	f002 fed2 	bl	80039fc <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f8b3 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000160 	.word	0x20000160
 8000c6c:	40011400 	.word	0x40011400

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_DMA_Init+0x4c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <MX_DMA_Init+0x4c>)
 8000c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_DMA_Init+0x4c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2039      	movs	r0, #57	@ 0x39
 8000c98:	f000 fdb5 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c9c:	2039      	movs	r0, #57	@ 0x39
 8000c9e:	f000 fdce 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2045      	movs	r0, #69	@ 0x45
 8000ca8:	f000 fdad 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cac:	2045      	movs	r0, #69	@ 0x45
 8000cae:	f000 fdc6 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a30      	ldr	r2, [pc, #192]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	481d      	ldr	r0, [pc, #116]	@ (8000dc0 <MX_GPIO_Init+0x100>)
 8000d4c:	f001 fb18 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4817      	ldr	r0, [pc, #92]	@ (8000dc4 <MX_GPIO_Init+0x104>)
 8000d68:	f001 f986 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <MX_GPIO_Init+0x100>)
 8000d84:	f001 f978 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <MX_GPIO_Init+0x100>)
 8000da0:	f001 f96a 	bl	8002078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2017      	movs	r0, #23
 8000daa:	f000 fd2c 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dae:	2017      	movs	r0, #23
 8000db0:	f000 fd45 	bl	800183e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <parse_order_string>:
int menu_quantities[MAX_ITEMS];
int item_count = 0;
int total_amount = 0;

// 문자열을 파싱하여 전역 변수에 저장하는 함수
int parse_order_string(const char* input) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    if (input == NULL) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <parse_order_string+0x14>
        return -1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e08e      	b.n	8000f06 <parse_order_string+0x132>
    }

    // 정적 버퍼 사용 (STM32에서 스택 크기 고려)
    static char str_buffer[512];
    memset(str_buffer, 0, sizeof(str_buffer));
 8000de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dec:	2100      	movs	r1, #0
 8000dee:	4848      	ldr	r0, [pc, #288]	@ (8000f10 <parse_order_string+0x13c>)
 8000df0:	f004 f8b5 	bl	8004f5e <memset>

    // 입력 문자열 길이 체크
    if (strlen(input) >= sizeof(str_buffer)) {
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff f9fd 	bl	80001f4 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e00:	d302      	bcc.n	8000e08 <parse_order_string+0x34>
        return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e07e      	b.n	8000f06 <parse_order_string+0x132>
    }

    strcpy(str_buffer, input);
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4841      	ldr	r0, [pc, #260]	@ (8000f10 <parse_order_string+0x13c>)
 8000e0c:	f004 f99f 	bl	800514e <strcpy>

    // 초기화
    item_count = 0;
 8000e10:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <parse_order_string+0x140>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
    total_amount = 0;
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <parse_order_string+0x144>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
    memset(menu_names, 0, sizeof(menu_names));
 8000e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e20:	2100      	movs	r1, #0
 8000e22:	483e      	ldr	r0, [pc, #248]	@ (8000f1c <parse_order_string+0x148>)
 8000e24:	f004 f89b 	bl	8004f5e <memset>
    memset(menu_quantities, 0, sizeof(menu_quantities));
 8000e28:	2250      	movs	r2, #80	@ 0x50
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	483c      	ldr	r0, [pc, #240]	@ (8000f20 <parse_order_string+0x14c>)
 8000e2e:	f004 f896 	bl	8004f5e <memset>

    // '[' 제거
    char* start = str_buffer;
 8000e32:	4b37      	ldr	r3, [pc, #220]	@ (8000f10 <parse_order_string+0x13c>)
 8000e34:	60fb      	str	r3, [r7, #12]
    if (*start == '[') {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b5b      	cmp	r3, #91	@ 0x5b
 8000e3c:	d102      	bne.n	8000e44 <parse_order_string+0x70>
        start++;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
    }

    // 첫 번째 숫자 건너뛰기 (예: "20]")
    char* token = strchr(start, ']');
 8000e44:	215d      	movs	r1, #93	@ 0x5d
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f004 f891 	bl	8004f6e <strchr>
 8000e4c:	60b8      	str	r0, [r7, #8]
    if (token != NULL) {
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <parse_order_string+0x86>
        start = token + 1;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
    }

    // '@'로 분리하여 파싱
    token = strtok(start, "@");
 8000e5a:	4932      	ldr	r1, [pc, #200]	@ (8000f24 <parse_order_string+0x150>)
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f004 f8a7 	bl	8004fb0 <strtok>
 8000e62:	60b8      	str	r0, [r7, #8]

    while (token != NULL && item_count < MAX_ITEMS) {
 8000e64:	e045      	b.n	8000ef2 <parse_order_string+0x11e>
        // 메뉴 이름 저장
        strncpy(menu_names[item_count], token, MAX_NAME_LEN - 1);
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <parse_order_string+0x140>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2232      	movs	r2, #50	@ 0x32
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <parse_order_string+0x148>)
 8000e72:	4413      	add	r3, r2
 8000e74:	2231      	movs	r2, #49	@ 0x31
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 f885 	bl	8004f88 <strncpy>
        menu_names[item_count][MAX_NAME_LEN - 1] = '\0';
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <parse_order_string+0x140>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <parse_order_string+0x148>)
 8000e84:	2132      	movs	r1, #50	@ 0x32
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3331      	adds	r3, #49	@ 0x31
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]

        // 다음 토큰 (수량)
        token = strtok(NULL, "@");
 8000e92:	4924      	ldr	r1, [pc, #144]	@ (8000f24 <parse_order_string+0x150>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f004 f88b 	bl	8004fb0 <strtok>
 8000e9a:	60b8      	str	r0, [r7, #8]
        if (token == NULL) break;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d02f      	beq.n	8000f02 <parse_order_string+0x12e>

        // "total"인지 확인
        if (strcmp(menu_names[item_count], "total") == 0) {
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <parse_order_string+0x140>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2232      	movs	r2, #50	@ 0x32
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <parse_order_string+0x148>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	491d      	ldr	r1, [pc, #116]	@ (8000f28 <parse_order_string+0x154>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f994 	bl	80001e0 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <parse_order_string+0xf8>
            total_amount = atoi(token);
 8000ebe:	68b8      	ldr	r0, [r7, #8]
 8000ec0:	f003 fec0 	bl	8004c44 <atoi>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <parse_order_string+0x144>)
 8000ec8:	6013      	str	r3, [r2, #0]
            break;
 8000eca:	e01b      	b.n	8000f04 <parse_order_string+0x130>
        } else {
            menu_quantities[item_count] = atoi(token);
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <parse_order_string+0x140>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	68b8      	ldr	r0, [r7, #8]
 8000ed2:	f003 feb7 	bl	8004c44 <atoi>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <parse_order_string+0x14c>)
 8000eda:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            item_count++;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <parse_order_string+0x140>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <parse_order_string+0x140>)
 8000ee6:	6013      	str	r3, [r2, #0]
        }

        // 다음 메뉴 이름
        token = strtok(NULL, "@");
 8000ee8:	490e      	ldr	r1, [pc, #56]	@ (8000f24 <parse_order_string+0x150>)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f004 f860 	bl	8004fb0 <strtok>
 8000ef0:	60b8      	str	r0, [r7, #8]
    while (token != NULL && item_count < MAX_ITEMS) {
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <parse_order_string+0x130>
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <parse_order_string+0x140>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b13      	cmp	r3, #19
 8000efe:	ddb2      	ble.n	8000e66 <parse_order_string+0x92>
 8000f00:	e000      	b.n	8000f04 <parse_order_string+0x130>
        if (token == NULL) break;
 8000f02:	bf00      	nop
    }

    return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200007a8 	.word	0x200007a8
 8000f14:	200007a0 	.word	0x200007a0
 8000f18:	200007a4 	.word	0x200007a4
 8000f1c:	20000368 	.word	0x20000368
 8000f20:	20000750 	.word	0x20000750
 8000f24:	08005db0 	.word	0x08005db0
 8000f28:	08005db4 	.word	0x08005db4

08000f2c <get_total_quantity>:
    total_amount = 0;
    memset(menu_names, 0, sizeof(menu_names));
    memset(menu_quantities, 0, sizeof(menu_quantities));
}

int get_total_quantity(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
    int total_qty = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < item_count; i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	e009      	b.n	8000f50 <get_total_quantity+0x24>
        total_qty += menu_quantities[i];
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <get_total_quantity+0x3c>)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < item_count; i++) {
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <get_total_quantity+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf0      	blt.n	8000f3c <get_total_quantity+0x10>
    }
    return total_qty;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000750 	.word	0x20000750
 8000f6c:	200007a0 	.word	0x200007a0

08000f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fae:	2007      	movs	r0, #7
 8000fb0:	f000 fc1e 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <HAL_TIM_Base_MspInit+0x64>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10e      	bne.n	8000ff0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fee:	e012      	b.n	8001016 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff8:	d10d      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <HAL_TIM_Base_MspInit+0x68>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a24      	ldr	r2, [pc, #144]	@ (80010dc <HAL_TIM_MspPostInit+0xb0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d11f      	bne.n	800108e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800106a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <HAL_TIM_MspPostInit+0xb8>)
 8001088:	f000 fff6 	bl	8002078 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800108c:	e022      	b.n	80010d4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001096:	d11d      	bne.n	80010d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_TIM_MspPostInit+0xb4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c4:	2301      	movs	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_TIM_MspPostInit+0xb8>)
 80010d0:	f000 ffd2 	bl	8002078 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a64      	ldr	r2, [pc, #400]	@ (8001298 <HAL_UART_MspInit+0x1b0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b63      	ldr	r3, [pc, #396]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a62      	ldr	r2, [pc, #392]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a5b      	ldr	r2, [pc, #364]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b59      	ldr	r3, [pc, #356]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001142:	230c      	movs	r3, #12
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001152:	2307      	movs	r3, #7
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4850      	ldr	r0, [pc, #320]	@ (80012a0 <HAL_UART_MspInit+0x1b8>)
 800115e:	f000 ff8b 	bl	8002078 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001162:	e095      	b.n	8001290 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a4e      	ldr	r2, [pc, #312]	@ (80012a4 <HAL_UART_MspInit+0x1bc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	f040 8090 	bne.w	8001290 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b49      	ldr	r3, [pc, #292]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001178:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001180:	4b46      	ldr	r3, [pc, #280]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b42      	ldr	r3, [pc, #264]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	4a41      	ldr	r2, [pc, #260]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6313      	str	r3, [r2, #48]	@ 0x30
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <HAL_UART_MspInit+0x1b4>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a8:	23c0      	movs	r3, #192	@ 0xc0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011b8:	2308      	movs	r3, #8
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4839      	ldr	r0, [pc, #228]	@ (80012a8 <HAL_UART_MspInit+0x1c0>)
 80011c4:	f000 ff58 	bl	8002078 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80011c8:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011ca:	4a39      	ldr	r2, [pc, #228]	@ (80012b0 <HAL_UART_MspInit+0x1c8>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80011ce:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011d0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80011d4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d6:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e2:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ea:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001208:	4828      	ldr	r0, [pc, #160]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 800120a:	f000 fb33 	bl	8001874 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001214:	f7ff fdd8 	bl	8000dc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a24      	ldr	r2, [pc, #144]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 800121c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <HAL_UART_MspInit+0x1c4>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001226:	4a24      	ldr	r2, [pc, #144]	@ (80012b8 <HAL_UART_MspInit+0x1d0>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 800122c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001230:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001234:	2240      	movs	r2, #64	@ 0x40
 8001236:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001244:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001266:	f000 fb05 	bl	8001874 <HAL_DMA_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001270:	f7ff fdaa 	bl	8000dc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <HAL_UART_MspInit+0x1cc>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2047      	movs	r0, #71	@ 0x47
 8001286:	f000 fabe 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800128a:	2047      	movs	r0, #71	@ 0x47
 800128c:	f000 fad7 	bl	800183e <HAL_NVIC_EnableIRQ>
}
 8001290:	bf00      	nop
 8001292:	3730      	adds	r7, #48	@ 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40004400 	.word	0x40004400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40011400 	.word	0x40011400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	200001a8 	.word	0x200001a8
 80012b0:	40026428 	.word	0x40026428
 80012b4:	20000208 	.word	0x20000208
 80012b8:	400264a0 	.word	0x400264a0

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f97d 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 800131e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001322:	f001 f847 	bl	80023b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <DMA2_Stream1_IRQHandler+0x10>)
 8001332:	f000 fc37 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001a8 	.word	0x200001a8

08001340 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA2_Stream6_IRQHandler+0x10>)
 8001346:	f000 fc2d 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000208 	.word	0x20000208

08001354 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <USART6_IRQHandler+0x10>)
 800135a:	f002 fbc5 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000160 	.word	0x20000160

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_kill>:

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001382:	f003 feb7 	bl	80050f4 <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <_exit+0x12>

080013ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00a      	b.n	80013d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c0:	f3af 8000 	nop.w
 80013c4:	4601      	mov	r1, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	b2ca      	uxtb	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf0      	blt.n	80013c0 <_read+0x12>
  }

  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e009      	b.n	800140e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbf1      	blt.n	80013fa <_write+0x12>
  }
  return len;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_close>:

int _close(int file)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	605a      	str	r2, [r3, #4]
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_isatty>:

int _isatty(int file)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f003 fe1c 	bl	80050f4 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200009a8 	.word	0x200009a8
 80014f0:	20000b00 	.word	0x20000b00

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f003 fddb 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f925 	bl	8000798 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800155c:	08005fd0 	.word	0x08005fd0
  ldr r2, =_sbss
 8001560:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001564:	20000afc 	.word	0x20000afc

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f92b 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fce6 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f943 	bl	800185a <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f90b 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000004 	.word	0x20000004
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000000c 	.word	0x2000000c
 8001634:	200009ac 	.word	0x200009ac

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200009ac 	.word	0x200009ac

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	@ (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff feda 	bl	8001638 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e099      	b.n	80019c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b0:	e00f      	b.n	80018d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b2:	f7ff fec1 	bl	8001638 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d908      	bls.n	80018d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e078      	b.n	80019c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e8      	bne.n	80018b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_DMA_Init+0x158>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2b04      	cmp	r3, #4
 800192a:	d107      	bne.n	800193c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	4313      	orrs	r3, r2
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0307 	bic.w	r3, r3, #7
 8001952:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2b04      	cmp	r3, #4
 8001964:	d117      	bne.n	8001996 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fb01 	bl	8001f80 <DMA_CheckFifoParam>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001992:	2301      	movs	r3, #1
 8001994:	e016      	b.n	80019c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fab8 	bl	8001f14 <DMA_CalcBaseAndBitshift>
 80019a4:	4603      	mov	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ac:	223f      	movs	r2, #63	@ 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	f010803f 	.word	0xf010803f

080019d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_DMA_Start_IT+0x26>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e040      	b.n	8001a78 <HAL_DMA_Start_IT+0xa8>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d12f      	bne.n	8001a6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fa4a 	bl	8001eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	223f      	movs	r2, #63	@ 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0216 	orr.w	r2, r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	f7ff fdd3 	bl	8001638 <HAL_GetTick>
 8001a92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e052      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0216 	bic.w	r2, r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <HAL_DMA_Abort+0x62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0208 	bic.w	r2, r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b02:	e013      	b.n	8001b2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b04:	f7ff fd98 	bl	8001638 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d90c      	bls.n	8001b2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e015      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e4      	bne.n	8001b04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	223f      	movs	r2, #63	@ 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00c      	b.n	8001b98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	@ (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000004 	.word	0x20000004
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3b10      	subs	r3, #16
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x64>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x68>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d909      	bls.n	8001f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f54:	e007      	b.n	8001f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	aaaaaaab 	.word	0xaaaaaaab
 8001f7c:	08005dd4 	.word	0x08005dd4

08001f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11f      	bne.n	8001fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d856      	bhi.n	800204e <DMA_CheckFifoParam+0xce>
 8001fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <DMA_CheckFifoParam+0x28>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fcb 	.word	0x08001fcb
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	0800204f 	.word	0x0800204f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d046      	beq.n	8002052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e043      	b.n	8002052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd2:	d140      	bne.n	8002056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd8:	e03d      	b.n	8002056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe2:	d121      	bne.n	8002028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d837      	bhi.n	800205a <DMA_CheckFifoParam+0xda>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <DMA_CheckFifoParam+0x70>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002007 	.word	0x08002007
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002019 	.word	0x08002019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e030      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d025      	beq.n	800205e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002016:	e022      	b.n	800205e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002026:	e01c      	b.n	8002062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d903      	bls.n	8002036 <DMA_CheckFifoParam+0xb6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002034:	e018      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      break;
 800203a:	e015      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e00b      	b.n	8002066 <DMA_CheckFifoParam+0xe6>
      break;
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;   
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
    }
  } 
  
  return status; 
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e159      	b.n	8002348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8148 	bne.w	8002342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a2 	beq.w	8002342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x202>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x1fe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a47      	ldr	r2, [pc, #284]	@ (8002370 <HAL_GPIO_Init+0x2f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x1fa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_GPIO_Init+0x2fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x1f6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a45      	ldr	r2, [pc, #276]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x1f2>
 8002266:	2304      	movs	r3, #4
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226a:	2307      	movs	r3, #7
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x204>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_GPIO_Init+0x304>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_GPIO_Init+0x304>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f aea2 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f940 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e267      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d075      	beq.n	80024ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b85      	ldr	r3, [pc, #532]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002416:	2b08      	cmp	r3, #8
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b82      	ldr	r3, [pc, #520]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05b      	beq.n	80024ec <HAL_RCC_OscConfig+0x108>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d157      	bne.n	80024ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e242      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x74>
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b70      	ldr	r3, [pc, #448]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6f      	ldr	r2, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6d      	ldr	r3, [pc, #436]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6c      	ldr	r2, [pc, #432]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 800247c:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a68      	ldr	r2, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b66      	ldr	r3, [pc, #408]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f8cc 	bl	8001638 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff f8c8 	bl	8001638 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e207      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xc0>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f8b8 	bl	8001638 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff f8b4 	bl	8001638 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1f3      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b51      	ldr	r3, [pc, #324]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0xe8>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b44      	ldr	r3, [pc, #272]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c7      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4937      	ldr	r1, [pc, #220]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCC_OscConfig+0x244>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7ff f86d 	bl	8001638 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f869 	bl	8001638 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a8      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4925      	ldr	r1, [pc, #148]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x244>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff f84c 	bl	8001638 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff f848 	bl	8001638 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e187      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_RCC_OscConfig+0x248>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff f82c 	bl	8001638 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff f828 	bl	8001638 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e167      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x200>
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_OscConfig+0x248>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7ff f815 	bl	8001638 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e00e      	b.n	8002630 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7ff f811 	bl	8001638 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d907      	bls.n	8002630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e150      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002624:	40023800 	.word	0x40023800
 8002628:	42470000 	.word	0x42470000
 800262c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ea      	bne.n	8002612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8097 	beq.w	8002778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b81      	ldr	r3, [pc, #516]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a7c      	ldr	r2, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b7a      	ldr	r3, [pc, #488]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a73      	ldr	r2, [pc, #460]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe ffd1 	bl	8001638 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe ffcd 	bl	8001638 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e10c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x2ea>
 80026c0:	4b64      	ldr	r3, [pc, #400]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a63      	ldr	r2, [pc, #396]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x30c>
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a5e      	ldr	r2, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026f0:	4b58      	ldr	r3, [pc, #352]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a57      	ldr	r2, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	4b55      	ldr	r3, [pc, #340]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a54      	ldr	r2, [pc, #336]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe ff92 	bl	8001638 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe ff8e 	bl	8001638 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0cb      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCC_OscConfig+0x334>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe ff7c 	bl	8001638 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe ff78 	bl	8001638 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0b5      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a1 	beq.w	80028c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002782:	4b34      	ldr	r3, [pc, #208]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d05c      	beq.n	8002848 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d141      	bne.n	800281a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b31      	ldr	r3, [pc, #196]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe ff4c 	bl	8001638 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe ff48 	bl	8001638 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e087      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe ff21 	bl	8001638 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe ff1d 	bl	8001638 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e05c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x416>
 8002818:	e054      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe ff0a 	bl	8001638 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe ff06 	bl	8001638 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e045      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
 8002846:	e03d      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e038      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_RCC_OscConfig+0x4ec>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d028      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d121      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d11a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fe38 	bl	8001638 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fe34 	bl	8001638 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fd98 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08005dbc 	.word	0x08005dbc
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	20000008 	.word	0x20000008

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b094      	sub	sp, #80	@ 0x50
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab8:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	f200 80e1 	bhi.w	8002c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad2:	e0db      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad8:	e0db      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b73      	ldr	r3, [pc, #460]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002adc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ade:	e0d8      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	2200      	movs	r2, #0
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b24:	0150      	lsls	r0, r2, #5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	1a51      	subs	r1, r2, r1
 8002b2e:	6139      	str	r1, [r7, #16]
 8002b30:	4629      	mov	r1, r5
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b44:	4659      	mov	r1, fp
 8002b46:	018b      	lsls	r3, r1, #6
 8002b48:	4651      	mov	r1, sl
 8002b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4e:	4651      	mov	r1, sl
 8002b50:	018a      	lsls	r2, r1, #6
 8002b52:	4651      	mov	r1, sl
 8002b54:	ebb2 0801 	subs.w	r8, r2, r1
 8002b58:	4659      	mov	r1, fp
 8002b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b72:	4690      	mov	r8, r2
 8002b74:	4699      	mov	r9, r3
 8002b76:	4623      	mov	r3, r4
 8002b78:	eb18 0303 	adds.w	r3, r8, r3
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	462b      	mov	r3, r5
 8002b80:	eb49 0303 	adc.w	r3, r9, r3
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b92:	4629      	mov	r1, r5
 8002b94:	024b      	lsls	r3, r1, #9
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	024a      	lsls	r2, r1, #9
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb0:	f7fd fb7e 	bl	80002b0 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bbc:	e058      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	f04f 0000 	mov.w	r0, #0
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bea:	0150      	lsls	r0, r2, #5
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c10:	ebb2 040a 	subs.w	r4, r2, sl
 8002c14:	eb63 050b 	sbc.w	r5, r3, fp
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	00eb      	lsls	r3, r5, #3
 8002c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c26:	00e2      	lsls	r2, r4, #3
 8002c28:	4614      	mov	r4, r2
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	18e3      	adds	r3, r4, r3
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	464b      	mov	r3, r9
 8002c34:	eb45 0303 	adc.w	r3, r5, r3
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c46:	4629      	mov	r1, r5
 8002c48:	028b      	lsls	r3, r1, #10
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c50:	4621      	mov	r1, r4
 8002c52:	028a      	lsls	r2, r1, #10
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c64:	f7fd fb24 	bl	80002b0 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3750      	adds	r7, #80	@ 0x50
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc8:	f7ff fff0 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	@ (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	08005dcc 	.word	0x08005dcc

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff ffdc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0b5b      	lsrs	r3, r3, #13
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	@ (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08005dcc 	.word	0x08005dcc

08002d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e041      	b.n	8002daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe f940 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fac0 	bl	80032d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e041      	b.n	8002e48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f839 	bl	8002e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f000 fa71 	bl	80032d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_TIM_PWM_Start+0x24>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e022      	b.n	8002ece <HAL_TIM_PWM_Start+0x6a>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d109      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0x3e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e015      	b.n	8002ece <HAL_TIM_PWM_Start+0x6a>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d109      	bne.n	8002ebc <HAL_TIM_PWM_Start+0x58>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e008      	b.n	8002ece <HAL_TIM_PWM_Start+0x6a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e068      	b.n	8002fa8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x82>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee4:	e013      	b.n	8002f0e <HAL_TIM_PWM_Start+0xaa>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0x92>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_PWM_Start+0xaa>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d104      	bne.n	8002f06 <HAL_TIM_PWM_Start+0xa2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f04:	e003      	b.n	8002f0e <HAL_TIM_PWM_Start+0xaa>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc8a 	bl	8003830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <HAL_TIM_PWM_Start+0x14c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d107      	bne.n	8002f36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_TIM_PWM_Start+0x14c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x10e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f48:	d013      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x10e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a19      	ldr	r2, [pc, #100]	@ (8002fb4 <HAL_TIM_PWM_Start+0x150>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x10e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_TIM_PWM_Start+0x154>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x10e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <HAL_TIM_PWM_Start+0x158>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x10e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <HAL_TIM_PWM_Start+0x15c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d010      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	e007      	b.n	8002fa6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40014000 	.word	0x40014000

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ae      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 809f 	bhi.w	8003130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003131 	.word	0x08003131
 8003000:	08003131 	.word	0x08003131
 8003004:	08003131 	.word	0x08003131
 8003008:	0800306d 	.word	0x0800306d
 800300c:	08003131 	.word	0x08003131
 8003010:	08003131 	.word	0x08003131
 8003014:	08003131 	.word	0x08003131
 8003018:	080030af 	.word	0x080030af
 800301c:	08003131 	.word	0x08003131
 8003020:	08003131 	.word	0x08003131
 8003024:	08003131 	.word	0x08003131
 8003028:	080030ef 	.word	0x080030ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f9d6 	bl	80033e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e064      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa1c 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
      break;
 80030ac:	e043      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa67 	bl	8003588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      break;
 80030ec:	e023      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fab1 	bl	800365c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e002      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800313e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_ConfigClockSource+0x1c>
 8003160:	2302      	movs	r3, #2
 8003162:	e0b4      	b.n	80032ce <HAL_TIM_ConfigClockSource+0x186>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800318a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319c:	d03e      	beq.n	800321c <HAL_TIM_ConfigClockSource+0xd4>
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a2:	f200 8087 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031aa:	f000 8086 	beq.w	80032ba <HAL_TIM_ConfigClockSource+0x172>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	d87f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b70      	cmp	r3, #112	@ 0x70
 80031b6:	d01a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xa6>
 80031b8:	2b70      	cmp	r3, #112	@ 0x70
 80031ba:	d87b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b60      	cmp	r3, #96	@ 0x60
 80031be:	d050      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x11a>
 80031c0:	2b60      	cmp	r3, #96	@ 0x60
 80031c2:	d877      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b50      	cmp	r3, #80	@ 0x50
 80031c6:	d03c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xfa>
 80031c8:	2b50      	cmp	r3, #80	@ 0x50
 80031ca:	d873      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b40      	cmp	r3, #64	@ 0x40
 80031ce:	d058      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x13a>
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	d86f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b30      	cmp	r3, #48	@ 0x30
 80031d6:	d064      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b30      	cmp	r3, #48	@ 0x30
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d867      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05c      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d05a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	e062      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	f000 faf7 	bl	80037f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e04f      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	f000 fae0 	bl	80037f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	f000 fa54 	bl	80036fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	@ 0x50
 800325a:	4618      	mov	r0, r3
 800325c:	f000 faad 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 8003260:	e02c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 fa73 	bl	800375a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	@ 0x60
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fa9d 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 8003280:	e01c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fa34 	bl	80036fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	@ 0x40
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa8d 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 fa84 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 80032b2:	e003      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <TIM_Base_SetConfig+0xf0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00f      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a34      	ldr	r2, [pc, #208]	@ (80033cc <TIM_Base_SetConfig+0xf4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a33      	ldr	r2, [pc, #204]	@ (80033d0 <TIM_Base_SetConfig+0xf8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x38>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <TIM_Base_SetConfig+0xfc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <TIM_Base_SetConfig+0xf0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01b      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d017      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a25      	ldr	r2, [pc, #148]	@ (80033cc <TIM_Base_SetConfig+0xf4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <TIM_Base_SetConfig+0xf8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <TIM_Base_SetConfig+0xfc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <TIM_Base_SetConfig+0x100>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <TIM_Base_SetConfig+0x104>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <TIM_Base_SetConfig+0x108>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d108      	bne.n	8003374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <TIM_Base_SetConfig+0xf0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d103      	bne.n	80033a2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800

080033e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 0201 	bic.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <TIM_OC1_SetConfig+0xc8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10c      	bne.n	800345a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0308 	bic.w	r3, r3, #8
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <TIM_OC1_SetConfig+0xc8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40010000 	.word	0x40010000

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 0210 	bic.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <TIM_OC2_SetConfig+0xd4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10d      	bne.n	800352c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800352a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <TIM_OC2_SetConfig+0xd4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d113      	bne.n	800355c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800353a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000

08003588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <TIM_OC3_SetConfig+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10d      	bne.n	8003602 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a14      	ldr	r2, [pc, #80]	@ (8003658 <TIM_OC3_SetConfig+0xd0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d113      	bne.n	8003632 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40010000 	.word	0x40010000

0800365c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a10      	ldr	r2, [pc, #64]	@ (80036f8 <TIM_OC4_SetConfig+0x9c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d109      	bne.n	80036d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000

080036fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 030a 	bic.w	r3, r3, #10
 8003738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0210 	bic.w	r2, r3, #16
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	031b      	lsls	r3, r3, #12
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003796:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f043 0307 	orr.w	r3, r3, #7
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1a      	ldr	r2, [r3, #32]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e050      	b.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e0:	d013      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a16      	ldr	r2, [pc, #88]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10c      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40014000 	.word	0x40014000

08003958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e03d      	b.n	80039f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e042      	b.n	8003a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fb60 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fe8b 	bl	800475c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d112      	bne.n	8003adc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_Receive_DMA+0x26>
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00b      	b.n	8003ade <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fbda 	bl	800428c <UART_Start_Receive_DMA>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	@ 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fd4a 	bl	80045e0 <UART_Receive_IT>
      return;
 8003b4c:	e273      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80d1 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 820a 	beq.w	800402c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fcd5 	bl	80045e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_UART_IRQHandler+0x17a>
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04f      	beq.n	8003d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fbe0 	bl	8004428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d141      	bne.n	8003cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	4a8a      	ldr	r2, [pc, #552]	@ (8003ef8 <HAL_UART_IRQHandler+0x410>)
 8003cd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd ff42 	bl	8001b60 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00e      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9b6 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00a      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9b2 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e006      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9ae 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d0e:	e18d      	b.n	800402c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	bf00      	nop
    return;
 8003d12:	e18b      	b.n	800402c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 8167 	bne.w	8003fec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8160 	beq.w	8003fec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8159 	beq.w	8003fec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	f040 80ce 	bne.w	8003efc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a9 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f080 80a2 	bcs.w	8003ec8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d96:	f000 8088 	beq.w	8003eaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1d9      	bne.n	8003d9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e1      	bne.n	8003de6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fdeb 	bl	8001a80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8d9 	bl	8004078 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ec6:	e0b3      	b.n	8004030 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	f040 80ad 	bne.w	8004030 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee0:	f040 80a6 	bne.w	8004030 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8c1 	bl	8004078 <HAL_UARTEx_RxEventCallback>
      return;
 8003ef6:	e09b      	b.n	8004030 <HAL_UART_IRQHandler+0x548>
 8003ef8:	080044ef 	.word	0x080044ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 808e 	beq.w	8004034 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8089 	beq.w	8004034 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f46:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e3      	bne.n	8003f22 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e3      	bne.n	8003f5a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fc4:	61fa      	str	r2, [r7, #28]
 8003fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e3      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f847 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fea:	e023      	b.n	8004034 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_UART_IRQHandler+0x524>
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa83 	bl	8004510 <UART_Transmit_IT>
    return;
 800400a:	e014      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_UART_IRQHandler+0x54e>
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fac3 	bl	80045b0 <UART_EndTransmit_IT>
    return;
 800402a:	e004      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
    return;
 800402c:	bf00      	nop
 800402e:	e002      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
      return;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
      return;
 8004034:	bf00      	nop
  }
}
 8004036:	37e8      	adds	r7, #232	@ 0xe8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b09c      	sub	sp, #112	@ 0x70
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d172      	bne.n	8004192 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ae:	2200      	movs	r2, #0
 80040b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80040d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80040fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3314      	adds	r3, #20
 8004104:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004106:	647a      	str	r2, [r7, #68]	@ 0x44
 8004108:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800410c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e5      	bne.n	80040e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	623b      	str	r3, [r7, #32]
   return(result);
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004130:	663b      	str	r3, [r7, #96]	@ 0x60
 8004132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800413a:	633a      	str	r2, [r7, #48]	@ 0x30
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800414e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	2b01      	cmp	r3, #1
 800415c:	d119      	bne.n	8004192 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	60fb      	str	r3, [r7, #12]
   return(result);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 0310 	bic.w	r3, r3, #16
 8004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800417e:	61fa      	str	r2, [r7, #28]
 8004180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	617b      	str	r3, [r7, #20]
   return(result);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004194:	2200      	movs	r2, #0
 8004196:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	d106      	bne.n	80041ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041a4:	4619      	mov	r1, r3
 80041a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041a8:	f7ff ff66 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ac:	e002      	b.n	80041b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041b0:	f7fc fa14 	bl	80005dc <HAL_UART_RxCpltCallback>
}
 80041b4:	bf00      	nop
 80041b6:	3770      	adds	r7, #112	@ 0x70
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d108      	bne.n	80041ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff48 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041e8:	e002      	b.n	80041f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff30 	bl	8004050 <HAL_UART_RxHalfCpltCallback>
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004214:	2b80      	cmp	r3, #128	@ 0x80
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b21      	cmp	r3, #33	@ 0x21
 800422a:	d108      	bne.n	800423e <UART_DMAError+0x46>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004238:	68b8      	ldr	r0, [r7, #8]
 800423a:	f000 f8cd 	bl	80043d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b22      	cmp	r3, #34	@ 0x22
 800425e:	d108      	bne.n	8004272 <UART_DMAError+0x7a>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2200      	movs	r2, #0
 800426a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800426c:	68b8      	ldr	r0, [r7, #8]
 800426e:	f000 f8db 	bl	8004428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800427e:	68b8      	ldr	r0, [r7, #8]
 8004280:	f7ff fef0 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b098      	sub	sp, #96	@ 0x60
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2222      	movs	r2, #34	@ 0x22
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	4a44      	ldr	r2, [pc, #272]	@ (80043cc <UART_Start_Receive_DMA+0x140>)
 80042ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	4a43      	ldr	r2, [pc, #268]	@ (80043d0 <UART_Start_Receive_DMA+0x144>)
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	4a42      	ldr	r2, [pc, #264]	@ (80043d4 <UART_Start_Receive_DMA+0x148>)
 80042ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	2200      	movs	r2, #0
 80042d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042d4:	f107 0308 	add.w	r3, r7, #8
 80042d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	f7fd fb70 	bl	80019d0 <HAL_DMA_Start_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2210      	movs	r2, #16
 80042fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e05d      	b.n	80043c4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004346:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004348:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800434c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	657b      	str	r3, [r7, #84]	@ 0x54
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800437a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	617b      	str	r3, [r7, #20]
   return(result);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80043b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6a39      	ldr	r1, [r7, #32]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3760      	adds	r7, #96	@ 0x60
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	08004091 	.word	0x08004091
 80043d0:	080041bd 	.word	0x080041bd
 80043d4:	080041f9 	.word	0x080041f9

080043d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	61ba      	str	r2, [r7, #24]
 8004402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6979      	ldr	r1, [r7, #20]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	613b      	str	r3, [r7, #16]
   return(result);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800441c:	bf00      	nop
 800441e:	3724      	adds	r7, #36	@ 0x24
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b095      	sub	sp, #84	@ 0x54
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004450:	643a      	str	r2, [r7, #64]	@ 0x40
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3314      	adds	r3, #20
 800446a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	61fb      	str	r3, [r7, #28]
   return(result);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e5      	bne.n	8004464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d119      	bne.n	80044d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c0:	61ba      	str	r2, [r7, #24]
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	613b      	str	r3, [r7, #16]
   return(result);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044e2:	bf00      	nop
 80044e4:	3754      	adds	r7, #84	@ 0x54
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff fdae 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b21      	cmp	r3, #33	@ 0x21
 8004522:	d13e      	bne.n	80045a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d114      	bne.n	8004558 <UART_Transmit_IT+0x48>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d110      	bne.n	8004558 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]
 8004556:	e008      	b.n	800456a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	1c59      	adds	r1, r3, #1
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6211      	str	r1, [r2, #32]
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4619      	mov	r1, r3
 8004578:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800458c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800459c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fd33 	bl	800403c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	@ 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b22      	cmp	r3, #34	@ 0x22
 80045fa:	f040 80aa 	bne.w	8004752 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	d115      	bne.n	8004634 <UART_Receive_IT+0x54>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d111      	bne.n	8004634 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	b29a      	uxth	r2, r3
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	1c9a      	adds	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	629a      	str	r2, [r3, #40]	@ 0x28
 8004632:	e024      	b.n	800467e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004642:	d007      	beq.n	8004654 <UART_Receive_IT+0x74>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <UART_Receive_IT+0x82>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e008      	b.n	8004674 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466e:	b2da      	uxtb	r2, r3
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4619      	mov	r1, r3
 800468c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800468e:	2b00      	cmp	r3, #0
 8004690:	d15d      	bne.n	800474e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0220 	bic.w	r2, r2, #32
 80046a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d135      	bne.n	8004744 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	613b      	str	r3, [r7, #16]
   return(result);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f023 0310 	bic.w	r3, r3, #16
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fe:	623a      	str	r2, [r7, #32]
 8004700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	61bb      	str	r3, [r7, #24]
   return(result);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d10a      	bne.n	8004736 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fc9b 	bl	8004078 <HAL_UARTEx_RxEventCallback>
 8004742:	e002      	b.n	800474a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fb ff49 	bl	80005dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e002      	b.n	8004754 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	@ 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0c0      	sub	sp, #256	@ 0x100
 8004762:	af00      	add	r7, sp, #0
 8004764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	68d9      	ldr	r1, [r3, #12]
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	ea40 0301 	orr.w	r3, r0, r1
 8004784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047b4:	f021 010c 	bic.w	r1, r1, #12
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047c2:	430b      	orrs	r3, r1
 80047c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	ea40 0301 	orr.w	r3, r0, r1
 80047e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004a28 <UART_SetConfig+0x2cc>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d005      	beq.n	80047fc <UART_SetConfig+0xa0>
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a2c <UART_SetConfig+0x2d0>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d104      	bne.n	8004806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fa76 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8004800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004804:	e003      	b.n	800480e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004806:	f7fe fa5d 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 800480a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004818:	f040 810c 	bne.w	8004a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800482a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	1891      	adds	r1, r2, r2
 8004834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004836:	415b      	adcs	r3, r3
 8004838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800483a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800483e:	4621      	mov	r1, r4
 8004840:	eb12 0801 	adds.w	r8, r2, r1
 8004844:	4629      	mov	r1, r5
 8004846:	eb43 0901 	adc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800486c:	462b      	mov	r3, r5
 800486e:	eb49 0303 	adc.w	r3, r9, r3
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800488a:	460b      	mov	r3, r1
 800488c:	18db      	adds	r3, r3, r3
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004890:	4613      	mov	r3, r2
 8004892:	eb42 0303 	adc.w	r3, r2, r3
 8004896:	657b      	str	r3, [r7, #84]	@ 0x54
 8004898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800489c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048a0:	f7fb fd06 	bl	80002b0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <UART_SetConfig+0x2d4>)
 80048aa:	fba3 2302 	umull	r2, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	011c      	lsls	r4, r3, #4
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048cc:	415b      	adcs	r3, r3
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048d4:	4641      	mov	r1, r8
 80048d6:	eb12 0a01 	adds.w	sl, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb43 0b01 	adc.w	fp, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f4:	4692      	mov	sl, r2
 80048f6:	469b      	mov	fp, r3
 80048f8:	4643      	mov	r3, r8
 80048fa:	eb1a 0303 	adds.w	r3, sl, r3
 80048fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004902:	464b      	mov	r3, r9
 8004904:	eb4b 0303 	adc.w	r3, fp, r3
 8004908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800491c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004920:	460b      	mov	r3, r1
 8004922:	18db      	adds	r3, r3, r3
 8004924:	643b      	str	r3, [r7, #64]	@ 0x40
 8004926:	4613      	mov	r3, r2
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	647b      	str	r3, [r7, #68]	@ 0x44
 800492e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004936:	f7fb fcbb 	bl	80002b0 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4611      	mov	r1, r2
 8004940:	4b3b      	ldr	r3, [pc, #236]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004942:	fba3 2301 	umull	r2, r3, r3, r1
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2264      	movs	r2, #100	@ 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004956:	4b36      	ldr	r3, [pc, #216]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004958:	fba3 2302 	umull	r2, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004964:	441c      	add	r4, r3
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004980:	415b      	adcs	r3, r3
 8004982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004988:	4641      	mov	r1, r8
 800498a:	1851      	adds	r1, r2, r1
 800498c:	6339      	str	r1, [r7, #48]	@ 0x30
 800498e:	4649      	mov	r1, r9
 8004990:	414b      	adcs	r3, r1
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049a0:	4659      	mov	r1, fp
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4651      	mov	r1, sl
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4642      	mov	r2, r8
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049bc:	464b      	mov	r3, r9
 80049be:	460a      	mov	r2, r1
 80049c0:	eb42 0303 	adc.w	r3, r2, r3
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049dc:	460b      	mov	r3, r1
 80049de:	18db      	adds	r3, r3, r3
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e2:	4613      	mov	r3, r2
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049f2:	f7fb fc5d 	bl	80002b0 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	@ 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 0207 	and.w	r2, r3, #7
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4422      	add	r2, r4
 8004a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a24:	e106      	b.n	8004c34 <UART_SetConfig+0x4d8>
 8004a26:	bf00      	nop
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40011400 	.word	0x40011400
 8004a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	1891      	adds	r1, r2, r2
 8004a4c:	6239      	str	r1, [r7, #32]
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a56:	4641      	mov	r1, r8
 8004a58:	1854      	adds	r4, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0501 	adc.w	r5, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	00eb      	lsls	r3, r5, #3
 8004a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a6e:	00e2      	lsls	r2, r4, #3
 8004a70:	4614      	mov	r4, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	18e3      	adds	r3, r4, r3
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	eb45 0303 	adc.w	r3, r5, r3
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	008b      	lsls	r3, r1, #2
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aac:	4621      	mov	r1, r4
 8004aae:	008a      	lsls	r2, r1, #2
 8004ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ab4:	f7fb fbfc 	bl	80002b0 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b60      	ldr	r3, [pc, #384]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	61b9      	str	r1, [r7, #24]
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	4641      	mov	r1, r8
 8004aea:	1851      	adds	r1, r2, r1
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	4649      	mov	r1, r9
 8004af0:	414b      	adcs	r3, r1
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b00:	4659      	mov	r1, fp
 8004b02:	00cb      	lsls	r3, r1, #3
 8004b04:	4651      	mov	r1, sl
 8004b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	00ca      	lsls	r2, r1, #3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4642      	mov	r2, r8
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	460a      	mov	r2, r1
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b52:	f7fb fbad 	bl	80002b0 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4b38      	ldr	r3, [pc, #224]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2264      	movs	r2, #100	@ 0x64
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	1acb      	subs	r3, r1, r3
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	3332      	adds	r3, #50	@ 0x32
 8004b70:	4a33      	ldr	r2, [pc, #204]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b7c:	441c      	add	r4, r3
 8004b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b82:	2200      	movs	r2, #0
 8004b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	415b      	adcs	r3, r3
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bce:	464b      	mov	r3, r9
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	eb42 0303 	adc.w	r3, r2, r3
 8004bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	008b      	lsls	r3, r1, #2
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	008a      	lsls	r2, r1, #2
 8004bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c02:	f7fb fb55 	bl	80002b0 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	@ 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	@ 0x32
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4422      	add	r2, r4
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c40:	51eb851f 	.word	0x51eb851f

08004c44 <atoi>:
 8004c44:	220a      	movs	r2, #10
 8004c46:	2100      	movs	r1, #0
 8004c48:	f000 b87a 	b.w	8004d40 <strtol>

08004c4c <_strtol_l.isra.0>:
 8004c4c:	2b24      	cmp	r3, #36	@ 0x24
 8004c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c52:	4686      	mov	lr, r0
 8004c54:	4690      	mov	r8, r2
 8004c56:	d801      	bhi.n	8004c5c <_strtol_l.isra.0+0x10>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d106      	bne.n	8004c6a <_strtol_l.isra.0+0x1e>
 8004c5c:	f000 fa4a 	bl	80050f4 <__errno>
 8004c60:	2316      	movs	r3, #22
 8004c62:	6003      	str	r3, [r0, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6a:	4834      	ldr	r0, [pc, #208]	@ (8004d3c <_strtol_l.isra.0+0xf0>)
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	462a      	mov	r2, r5
 8004c70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c74:	5d06      	ldrb	r6, [r0, r4]
 8004c76:	f016 0608 	ands.w	r6, r6, #8
 8004c7a:	d1f8      	bne.n	8004c6e <_strtol_l.isra.0+0x22>
 8004c7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c7e:	d110      	bne.n	8004ca2 <_strtol_l.isra.0+0x56>
 8004c80:	782c      	ldrb	r4, [r5, #0]
 8004c82:	2601      	movs	r6, #1
 8004c84:	1c95      	adds	r5, r2, #2
 8004c86:	f033 0210 	bics.w	r2, r3, #16
 8004c8a:	d115      	bne.n	8004cb8 <_strtol_l.isra.0+0x6c>
 8004c8c:	2c30      	cmp	r4, #48	@ 0x30
 8004c8e:	d10d      	bne.n	8004cac <_strtol_l.isra.0+0x60>
 8004c90:	782a      	ldrb	r2, [r5, #0]
 8004c92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c96:	2a58      	cmp	r2, #88	@ 0x58
 8004c98:	d108      	bne.n	8004cac <_strtol_l.isra.0+0x60>
 8004c9a:	786c      	ldrb	r4, [r5, #1]
 8004c9c:	3502      	adds	r5, #2
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	e00a      	b.n	8004cb8 <_strtol_l.isra.0+0x6c>
 8004ca2:	2c2b      	cmp	r4, #43	@ 0x2b
 8004ca4:	bf04      	itt	eq
 8004ca6:	782c      	ldrbeq	r4, [r5, #0]
 8004ca8:	1c95      	addeq	r5, r2, #2
 8004caa:	e7ec      	b.n	8004c86 <_strtol_l.isra.0+0x3a>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f6      	bne.n	8004c9e <_strtol_l.isra.0+0x52>
 8004cb0:	2c30      	cmp	r4, #48	@ 0x30
 8004cb2:	bf14      	ite	ne
 8004cb4:	230a      	movne	r3, #10
 8004cb6:	2308      	moveq	r3, #8
 8004cb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004cbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	fbbc f9f3 	udiv	r9, ip, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8004ccc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004cd0:	2f09      	cmp	r7, #9
 8004cd2:	d80f      	bhi.n	8004cf4 <_strtol_l.isra.0+0xa8>
 8004cd4:	463c      	mov	r4, r7
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	dd1b      	ble.n	8004d12 <_strtol_l.isra.0+0xc6>
 8004cda:	1c57      	adds	r7, r2, #1
 8004cdc:	d007      	beq.n	8004cee <_strtol_l.isra.0+0xa2>
 8004cde:	4581      	cmp	r9, r0
 8004ce0:	d314      	bcc.n	8004d0c <_strtol_l.isra.0+0xc0>
 8004ce2:	d101      	bne.n	8004ce8 <_strtol_l.isra.0+0x9c>
 8004ce4:	45a2      	cmp	sl, r4
 8004ce6:	db11      	blt.n	8004d0c <_strtol_l.isra.0+0xc0>
 8004ce8:	fb00 4003 	mla	r0, r0, r3, r4
 8004cec:	2201      	movs	r2, #1
 8004cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cf2:	e7eb      	b.n	8004ccc <_strtol_l.isra.0+0x80>
 8004cf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004cf8:	2f19      	cmp	r7, #25
 8004cfa:	d801      	bhi.n	8004d00 <_strtol_l.isra.0+0xb4>
 8004cfc:	3c37      	subs	r4, #55	@ 0x37
 8004cfe:	e7ea      	b.n	8004cd6 <_strtol_l.isra.0+0x8a>
 8004d00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d04:	2f19      	cmp	r7, #25
 8004d06:	d804      	bhi.n	8004d12 <_strtol_l.isra.0+0xc6>
 8004d08:	3c57      	subs	r4, #87	@ 0x57
 8004d0a:	e7e4      	b.n	8004cd6 <_strtol_l.isra.0+0x8a>
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d10:	e7ed      	b.n	8004cee <_strtol_l.isra.0+0xa2>
 8004d12:	1c53      	adds	r3, r2, #1
 8004d14:	d108      	bne.n	8004d28 <_strtol_l.isra.0+0xdc>
 8004d16:	2322      	movs	r3, #34	@ 0x22
 8004d18:	f8ce 3000 	str.w	r3, [lr]
 8004d1c:	4660      	mov	r0, ip
 8004d1e:	f1b8 0f00 	cmp.w	r8, #0
 8004d22:	d0a0      	beq.n	8004c66 <_strtol_l.isra.0+0x1a>
 8004d24:	1e69      	subs	r1, r5, #1
 8004d26:	e006      	b.n	8004d36 <_strtol_l.isra.0+0xea>
 8004d28:	b106      	cbz	r6, 8004d2c <_strtol_l.isra.0+0xe0>
 8004d2a:	4240      	negs	r0, r0
 8004d2c:	f1b8 0f00 	cmp.w	r8, #0
 8004d30:	d099      	beq.n	8004c66 <_strtol_l.isra.0+0x1a>
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d1f6      	bne.n	8004d24 <_strtol_l.isra.0+0xd8>
 8004d36:	f8c8 1000 	str.w	r1, [r8]
 8004d3a:	e794      	b.n	8004c66 <_strtol_l.isra.0+0x1a>
 8004d3c:	08005ddd 	.word	0x08005ddd

08004d40 <strtol>:
 8004d40:	4613      	mov	r3, r2
 8004d42:	460a      	mov	r2, r1
 8004d44:	4601      	mov	r1, r0
 8004d46:	4802      	ldr	r0, [pc, #8]	@ (8004d50 <strtol+0x10>)
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	f7ff bf7f 	b.w	8004c4c <_strtol_l.isra.0>
 8004d4e:	bf00      	nop
 8004d50:	2000001c 	.word	0x2000001c

08004d54 <std>:
 8004d54:	2300      	movs	r3, #0
 8004d56:	b510      	push	{r4, lr}
 8004d58:	4604      	mov	r4, r0
 8004d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d62:	6083      	str	r3, [r0, #8]
 8004d64:	8181      	strh	r1, [r0, #12]
 8004d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d68:	81c2      	strh	r2, [r0, #14]
 8004d6a:	6183      	str	r3, [r0, #24]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2208      	movs	r2, #8
 8004d70:	305c      	adds	r0, #92	@ 0x5c
 8004d72:	f000 f8f4 	bl	8004f5e <memset>
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <std+0x58>)
 8004d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <std+0x5c>)
 8004d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <std+0x60>)
 8004d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d82:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <std+0x64>)
 8004d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <std+0x68>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d006      	beq.n	8004d9c <std+0x48>
 8004d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d92:	4294      	cmp	r4, r2
 8004d94:	d002      	beq.n	8004d9c <std+0x48>
 8004d96:	33d0      	adds	r3, #208	@ 0xd0
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d105      	bne.n	8004da8 <std+0x54>
 8004d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da4:	f000 b9d0 	b.w	8005148 <__retarget_lock_init_recursive>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	bf00      	nop
 8004dac:	08004ed9 	.word	0x08004ed9
 8004db0:	08004efb 	.word	0x08004efb
 8004db4:	08004f33 	.word	0x08004f33
 8004db8:	08004f57 	.word	0x08004f57
 8004dbc:	200009b0 	.word	0x200009b0

08004dc0 <stdio_exit_handler>:
 8004dc0:	4a02      	ldr	r2, [pc, #8]	@ (8004dcc <stdio_exit_handler+0xc>)
 8004dc2:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <stdio_exit_handler+0x10>)
 8004dc4:	4803      	ldr	r0, [pc, #12]	@ (8004dd4 <stdio_exit_handler+0x14>)
 8004dc6:	f000 b869 	b.w	8004e9c <_fwalk_sglue>
 8004dca:	bf00      	nop
 8004dcc:	20000010 	.word	0x20000010
 8004dd0:	080054a5 	.word	0x080054a5
 8004dd4:	20000020 	.word	0x20000020

08004dd8 <cleanup_stdio>:
 8004dd8:	6841      	ldr	r1, [r0, #4]
 8004dda:	4b0c      	ldr	r3, [pc, #48]	@ (8004e0c <cleanup_stdio+0x34>)
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
 8004de2:	d001      	beq.n	8004de8 <cleanup_stdio+0x10>
 8004de4:	f000 fb5e 	bl	80054a4 <_fflush_r>
 8004de8:	68a1      	ldr	r1, [r4, #8]
 8004dea:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <cleanup_stdio+0x38>)
 8004dec:	4299      	cmp	r1, r3
 8004dee:	d002      	beq.n	8004df6 <cleanup_stdio+0x1e>
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fb57 	bl	80054a4 <_fflush_r>
 8004df6:	68e1      	ldr	r1, [r4, #12]
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <cleanup_stdio+0x3c>)
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	d004      	beq.n	8004e08 <cleanup_stdio+0x30>
 8004dfe:	4620      	mov	r0, r4
 8004e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e04:	f000 bb4e 	b.w	80054a4 <_fflush_r>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200009b0 	.word	0x200009b0
 8004e10:	20000a18 	.word	0x20000a18
 8004e14:	20000a80 	.word	0x20000a80

08004e18 <global_stdio_init.part.0>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <global_stdio_init.part.0+0x30>)
 8004e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e4c <global_stdio_init.part.0+0x34>)
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e50 <global_stdio_init.part.0+0x38>)
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	4620      	mov	r0, r4
 8004e24:	2200      	movs	r2, #0
 8004e26:	2104      	movs	r1, #4
 8004e28:	f7ff ff94 	bl	8004d54 <std>
 8004e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e30:	2201      	movs	r2, #1
 8004e32:	2109      	movs	r1, #9
 8004e34:	f7ff ff8e 	bl	8004d54 <std>
 8004e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff bf86 	b.w	8004d54 <std>
 8004e48:	20000ae8 	.word	0x20000ae8
 8004e4c:	200009b0 	.word	0x200009b0
 8004e50:	08004dc1 	.word	0x08004dc1

08004e54 <__sfp_lock_acquire>:
 8004e54:	4801      	ldr	r0, [pc, #4]	@ (8004e5c <__sfp_lock_acquire+0x8>)
 8004e56:	f000 b978 	b.w	800514a <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	20000af1 	.word	0x20000af1

08004e60 <__sfp_lock_release>:
 8004e60:	4801      	ldr	r0, [pc, #4]	@ (8004e68 <__sfp_lock_release+0x8>)
 8004e62:	f000 b973 	b.w	800514c <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	20000af1 	.word	0x20000af1

08004e6c <__sinit>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	f7ff fff0 	bl	8004e54 <__sfp_lock_acquire>
 8004e74:	6a23      	ldr	r3, [r4, #32]
 8004e76:	b11b      	cbz	r3, 8004e80 <__sinit+0x14>
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	f7ff bff0 	b.w	8004e60 <__sfp_lock_release>
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__sinit+0x28>)
 8004e82:	6223      	str	r3, [r4, #32]
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <__sinit+0x2c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f5      	bne.n	8004e78 <__sinit+0xc>
 8004e8c:	f7ff ffc4 	bl	8004e18 <global_stdio_init.part.0>
 8004e90:	e7f2      	b.n	8004e78 <__sinit+0xc>
 8004e92:	bf00      	nop
 8004e94:	08004dd9 	.word	0x08004dd9
 8004e98:	20000ae8 	.word	0x20000ae8

08004e9c <_fwalk_sglue>:
 8004e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	4688      	mov	r8, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eac:	f1b9 0901 	subs.w	r9, r9, #1
 8004eb0:	d505      	bpl.n	8004ebe <_fwalk_sglue+0x22>
 8004eb2:	6824      	ldr	r4, [r4, #0]
 8004eb4:	2c00      	cmp	r4, #0
 8004eb6:	d1f7      	bne.n	8004ea8 <_fwalk_sglue+0xc>
 8004eb8:	4630      	mov	r0, r6
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d907      	bls.n	8004ed4 <_fwalk_sglue+0x38>
 8004ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <_fwalk_sglue+0x38>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	4306      	orrs	r6, r0
 8004ed4:	3568      	adds	r5, #104	@ 0x68
 8004ed6:	e7e9      	b.n	8004eac <_fwalk_sglue+0x10>

08004ed8 <__sread>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	f000 f8e4 	bl	80050ac <_read_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	bfab      	itete	ge
 8004ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eea:	89a3      	ldrhlt	r3, [r4, #12]
 8004eec:	181b      	addge	r3, r3, r0
 8004eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ef2:	bfac      	ite	ge
 8004ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ef6:	81a3      	strhlt	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__swrite>:
 8004efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	461f      	mov	r7, r3
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	05db      	lsls	r3, r3, #23
 8004f04:	4605      	mov	r5, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4616      	mov	r6, r2
 8004f0a:	d505      	bpl.n	8004f18 <__swrite+0x1e>
 8004f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f10:	2302      	movs	r3, #2
 8004f12:	2200      	movs	r2, #0
 8004f14:	f000 f8b8 	bl	8005088 <_lseek_r>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	4632      	mov	r2, r6
 8004f26:	463b      	mov	r3, r7
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	f000 b8cf 	b.w	80050d0 <_write_r>

08004f32 <__sseek>:
 8004f32:	b510      	push	{r4, lr}
 8004f34:	460c      	mov	r4, r1
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 f8a5 	bl	8005088 <_lseek_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	bf15      	itete	ne
 8004f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f4e:	81a3      	strheq	r3, [r4, #12]
 8004f50:	bf18      	it	ne
 8004f52:	81a3      	strhne	r3, [r4, #12]
 8004f54:	bd10      	pop	{r4, pc}

08004f56 <__sclose>:
 8004f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5a:	f000 b885 	b.w	8005068 <_close_r>

08004f5e <memset>:
 8004f5e:	4402      	add	r2, r0
 8004f60:	4603      	mov	r3, r0
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d100      	bne.n	8004f68 <memset+0xa>
 8004f66:	4770      	bx	lr
 8004f68:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6c:	e7f9      	b.n	8004f62 <memset+0x4>

08004f6e <strchr>:
 8004f6e:	b2c9      	uxtb	r1, r1
 8004f70:	4603      	mov	r3, r0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f78:	b112      	cbz	r2, 8004f80 <strchr+0x12>
 8004f7a:	428a      	cmp	r2, r1
 8004f7c:	d1f9      	bne.n	8004f72 <strchr+0x4>
 8004f7e:	4770      	bx	lr
 8004f80:	2900      	cmp	r1, #0
 8004f82:	bf18      	it	ne
 8004f84:	2000      	movne	r0, #0
 8004f86:	4770      	bx	lr

08004f88 <strncpy>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	3901      	subs	r1, #1
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	b132      	cbz	r2, 8004f9e <strncpy+0x16>
 8004f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f94:	f803 4b01 	strb.w	r4, [r3], #1
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	2c00      	cmp	r4, #0
 8004f9c:	d1f7      	bne.n	8004f8e <strncpy+0x6>
 8004f9e:	441a      	add	r2, r3
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d100      	bne.n	8004fa8 <strncpy+0x20>
 8004fa6:	bd10      	pop	{r4, pc}
 8004fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fac:	e7f9      	b.n	8004fa2 <strncpy+0x1a>
	...

08004fb0 <strtok>:
 8004fb0:	4b16      	ldr	r3, [pc, #88]	@ (800500c <strtok+0x5c>)
 8004fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	681f      	ldr	r7, [r3, #0]
 8004fb8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004fba:	4605      	mov	r5, r0
 8004fbc:	460e      	mov	r6, r1
 8004fbe:	b9ec      	cbnz	r4, 8004ffc <strtok+0x4c>
 8004fc0:	2050      	movs	r0, #80	@ 0x50
 8004fc2:	f000 f935 	bl	8005230 <malloc>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6478      	str	r0, [r7, #68]	@ 0x44
 8004fca:	b920      	cbnz	r0, 8004fd6 <strtok+0x26>
 8004fcc:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <strtok+0x60>)
 8004fce:	4811      	ldr	r0, [pc, #68]	@ (8005014 <strtok+0x64>)
 8004fd0:	215b      	movs	r1, #91	@ 0x5b
 8004fd2:	f000 f8c5 	bl	8005160 <__assert_func>
 8004fd6:	e9c0 4400 	strd	r4, r4, [r0]
 8004fda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004fde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004fe2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004fe6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004fea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004fee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004ff2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004ff6:	6184      	str	r4, [r0, #24]
 8004ff8:	7704      	strb	r4, [r0, #28]
 8004ffa:	6244      	str	r4, [r0, #36]	@ 0x24
 8004ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	2301      	movs	r3, #1
 8005004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	f000 b806 	b.w	8005018 <__strtok_r>
 800500c:	2000001c 	.word	0x2000001c
 8005010:	08005edd 	.word	0x08005edd
 8005014:	08005ef4 	.word	0x08005ef4

08005018 <__strtok_r>:
 8005018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501a:	4604      	mov	r4, r0
 800501c:	b908      	cbnz	r0, 8005022 <__strtok_r+0xa>
 800501e:	6814      	ldr	r4, [r2, #0]
 8005020:	b144      	cbz	r4, 8005034 <__strtok_r+0x1c>
 8005022:	4620      	mov	r0, r4
 8005024:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005028:	460f      	mov	r7, r1
 800502a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800502e:	b91e      	cbnz	r6, 8005038 <__strtok_r+0x20>
 8005030:	b965      	cbnz	r5, 800504c <__strtok_r+0x34>
 8005032:	6015      	str	r5, [r2, #0]
 8005034:	2000      	movs	r0, #0
 8005036:	e005      	b.n	8005044 <__strtok_r+0x2c>
 8005038:	42b5      	cmp	r5, r6
 800503a:	d1f6      	bne.n	800502a <__strtok_r+0x12>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <__strtok_r+0xa>
 8005040:	6014      	str	r4, [r2, #0]
 8005042:	7003      	strb	r3, [r0, #0]
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005046:	461c      	mov	r4, r3
 8005048:	e00c      	b.n	8005064 <__strtok_r+0x4c>
 800504a:	b91d      	cbnz	r5, 8005054 <__strtok_r+0x3c>
 800504c:	4627      	mov	r7, r4
 800504e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005052:	460e      	mov	r6, r1
 8005054:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005058:	42ab      	cmp	r3, r5
 800505a:	d1f6      	bne.n	800504a <__strtok_r+0x32>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f2      	beq.n	8005046 <__strtok_r+0x2e>
 8005060:	2300      	movs	r3, #0
 8005062:	703b      	strb	r3, [r7, #0]
 8005064:	6014      	str	r4, [r2, #0]
 8005066:	e7ed      	b.n	8005044 <__strtok_r+0x2c>

08005068 <_close_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4d06      	ldr	r5, [pc, #24]	@ (8005084 <_close_r+0x1c>)
 800506c:	2300      	movs	r3, #0
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	f7fc f9d4 	bl	8001420 <_close>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_close_r+0x1a>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_close_r+0x1a>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000aec 	.word	0x20000aec

08005088 <_lseek_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	@ (80050a8 <_lseek_r+0x20>)
 800508c:	4604      	mov	r4, r0
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	2200      	movs	r2, #0
 8005094:	602a      	str	r2, [r5, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f7fc f9e9 	bl	800146e <_lseek>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_lseek_r+0x1e>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_lseek_r+0x1e>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	20000aec 	.word	0x20000aec

080050ac <_read_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d07      	ldr	r5, [pc, #28]	@ (80050cc <_read_r+0x20>)
 80050b0:	4604      	mov	r4, r0
 80050b2:	4608      	mov	r0, r1
 80050b4:	4611      	mov	r1, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	602a      	str	r2, [r5, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7fc f977 	bl	80013ae <_read>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_read_r+0x1e>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_read_r+0x1e>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20000aec 	.word	0x20000aec

080050d0 <_write_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d07      	ldr	r5, [pc, #28]	@ (80050f0 <_write_r+0x20>)
 80050d4:	4604      	mov	r4, r0
 80050d6:	4608      	mov	r0, r1
 80050d8:	4611      	mov	r1, r2
 80050da:	2200      	movs	r2, #0
 80050dc:	602a      	str	r2, [r5, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f7fc f982 	bl	80013e8 <_write>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_write_r+0x1e>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_write_r+0x1e>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000aec 	.word	0x20000aec

080050f4 <__errno>:
 80050f4:	4b01      	ldr	r3, [pc, #4]	@ (80050fc <__errno+0x8>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000001c 	.word	0x2000001c

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	@ (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	@ (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	@ (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	@ (8005144 <__libc_init_array+0x44>)
 8005114:	f000 fe40 	bl	8005d98 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	08005fc8 	.word	0x08005fc8
 800513c:	08005fc8 	.word	0x08005fc8
 8005140:	08005fc8 	.word	0x08005fc8
 8005144:	08005fcc 	.word	0x08005fcc

08005148 <__retarget_lock_init_recursive>:
 8005148:	4770      	bx	lr

0800514a <__retarget_lock_acquire_recursive>:
 800514a:	4770      	bx	lr

0800514c <__retarget_lock_release_recursive>:
 800514c:	4770      	bx	lr

0800514e <strcpy>:
 800514e:	4603      	mov	r3, r0
 8005150:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005154:	f803 2b01 	strb.w	r2, [r3], #1
 8005158:	2a00      	cmp	r2, #0
 800515a:	d1f9      	bne.n	8005150 <strcpy+0x2>
 800515c:	4770      	bx	lr
	...

08005160 <__assert_func>:
 8005160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005162:	4614      	mov	r4, r2
 8005164:	461a      	mov	r2, r3
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <__assert_func+0x2c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4605      	mov	r5, r0
 800516c:	68d8      	ldr	r0, [r3, #12]
 800516e:	b14c      	cbz	r4, 8005184 <__assert_func+0x24>
 8005170:	4b07      	ldr	r3, [pc, #28]	@ (8005190 <__assert_func+0x30>)
 8005172:	9100      	str	r1, [sp, #0]
 8005174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005178:	4906      	ldr	r1, [pc, #24]	@ (8005194 <__assert_func+0x34>)
 800517a:	462b      	mov	r3, r5
 800517c:	f000 f9ba 	bl	80054f4 <fiprintf>
 8005180:	f000 f9da 	bl	8005538 <abort>
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <__assert_func+0x38>)
 8005186:	461c      	mov	r4, r3
 8005188:	e7f3      	b.n	8005172 <__assert_func+0x12>
 800518a:	bf00      	nop
 800518c:	2000001c 	.word	0x2000001c
 8005190:	08005f4e 	.word	0x08005f4e
 8005194:	08005f5b 	.word	0x08005f5b
 8005198:	08005f89 	.word	0x08005f89

0800519c <_free_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4605      	mov	r5, r0
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d041      	beq.n	8005228 <_free_r+0x8c>
 80051a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a8:	1f0c      	subs	r4, r1, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfb8      	it	lt
 80051ae:	18e4      	addlt	r4, r4, r3
 80051b0:	f000 f8e8 	bl	8005384 <__malloc_lock>
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <_free_r+0x90>)
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	b933      	cbnz	r3, 80051c8 <_free_r+0x2c>
 80051ba:	6063      	str	r3, [r4, #4]
 80051bc:	6014      	str	r4, [r2, #0]
 80051be:	4628      	mov	r0, r5
 80051c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c4:	f000 b8e4 	b.w	8005390 <__malloc_unlock>
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	d908      	bls.n	80051de <_free_r+0x42>
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	1821      	adds	r1, r4, r0
 80051d0:	428b      	cmp	r3, r1
 80051d2:	bf01      	itttt	eq
 80051d4:	6819      	ldreq	r1, [r3, #0]
 80051d6:	685b      	ldreq	r3, [r3, #4]
 80051d8:	1809      	addeq	r1, r1, r0
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	e7ed      	b.n	80051ba <_free_r+0x1e>
 80051de:	461a      	mov	r2, r3
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	b10b      	cbz	r3, 80051e8 <_free_r+0x4c>
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d9fa      	bls.n	80051de <_free_r+0x42>
 80051e8:	6811      	ldr	r1, [r2, #0]
 80051ea:	1850      	adds	r0, r2, r1
 80051ec:	42a0      	cmp	r0, r4
 80051ee:	d10b      	bne.n	8005208 <_free_r+0x6c>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	4401      	add	r1, r0
 80051f4:	1850      	adds	r0, r2, r1
 80051f6:	4283      	cmp	r3, r0
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	d1e0      	bne.n	80051be <_free_r+0x22>
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	6053      	str	r3, [r2, #4]
 8005202:	4408      	add	r0, r1
 8005204:	6010      	str	r0, [r2, #0]
 8005206:	e7da      	b.n	80051be <_free_r+0x22>
 8005208:	d902      	bls.n	8005210 <_free_r+0x74>
 800520a:	230c      	movs	r3, #12
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	e7d6      	b.n	80051be <_free_r+0x22>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	1821      	adds	r1, r4, r0
 8005214:	428b      	cmp	r3, r1
 8005216:	bf04      	itt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	bf04      	itt	eq
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	6054      	str	r4, [r2, #4]
 8005226:	e7ca      	b.n	80051be <_free_r+0x22>
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000af8 	.word	0x20000af8

08005230 <malloc>:
 8005230:	4b02      	ldr	r3, [pc, #8]	@ (800523c <malloc+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f000 b825 	b.w	8005284 <_malloc_r>
 800523a:	bf00      	nop
 800523c:	2000001c 	.word	0x2000001c

08005240 <sbrk_aligned>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4e0f      	ldr	r6, [pc, #60]	@ (8005280 <sbrk_aligned+0x40>)
 8005244:	460c      	mov	r4, r1
 8005246:	6831      	ldr	r1, [r6, #0]
 8005248:	4605      	mov	r5, r0
 800524a:	b911      	cbnz	r1, 8005252 <sbrk_aligned+0x12>
 800524c:	f000 f964 	bl	8005518 <_sbrk_r>
 8005250:	6030      	str	r0, [r6, #0]
 8005252:	4621      	mov	r1, r4
 8005254:	4628      	mov	r0, r5
 8005256:	f000 f95f 	bl	8005518 <_sbrk_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d103      	bne.n	8005266 <sbrk_aligned+0x26>
 800525e:	f04f 34ff 	mov.w	r4, #4294967295
 8005262:	4620      	mov	r0, r4
 8005264:	bd70      	pop	{r4, r5, r6, pc}
 8005266:	1cc4      	adds	r4, r0, #3
 8005268:	f024 0403 	bic.w	r4, r4, #3
 800526c:	42a0      	cmp	r0, r4
 800526e:	d0f8      	beq.n	8005262 <sbrk_aligned+0x22>
 8005270:	1a21      	subs	r1, r4, r0
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f950 	bl	8005518 <_sbrk_r>
 8005278:	3001      	adds	r0, #1
 800527a:	d1f2      	bne.n	8005262 <sbrk_aligned+0x22>
 800527c:	e7ef      	b.n	800525e <sbrk_aligned+0x1e>
 800527e:	bf00      	nop
 8005280:	20000af4 	.word	0x20000af4

08005284 <_malloc_r>:
 8005284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005288:	1ccd      	adds	r5, r1, #3
 800528a:	f025 0503 	bic.w	r5, r5, #3
 800528e:	3508      	adds	r5, #8
 8005290:	2d0c      	cmp	r5, #12
 8005292:	bf38      	it	cc
 8005294:	250c      	movcc	r5, #12
 8005296:	2d00      	cmp	r5, #0
 8005298:	4606      	mov	r6, r0
 800529a:	db01      	blt.n	80052a0 <_malloc_r+0x1c>
 800529c:	42a9      	cmp	r1, r5
 800529e:	d904      	bls.n	80052aa <_malloc_r+0x26>
 80052a0:	230c      	movs	r3, #12
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	2000      	movs	r0, #0
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005380 <_malloc_r+0xfc>
 80052ae:	f000 f869 	bl	8005384 <__malloc_lock>
 80052b2:	f8d8 3000 	ldr.w	r3, [r8]
 80052b6:	461c      	mov	r4, r3
 80052b8:	bb44      	cbnz	r4, 800530c <_malloc_r+0x88>
 80052ba:	4629      	mov	r1, r5
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff ffbf 	bl	8005240 <sbrk_aligned>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	4604      	mov	r4, r0
 80052c6:	d158      	bne.n	800537a <_malloc_r+0xf6>
 80052c8:	f8d8 4000 	ldr.w	r4, [r8]
 80052cc:	4627      	mov	r7, r4
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	d143      	bne.n	800535a <_malloc_r+0xd6>
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	d04b      	beq.n	800536e <_malloc_r+0xea>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	4639      	mov	r1, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	eb04 0903 	add.w	r9, r4, r3
 80052e0:	f000 f91a 	bl	8005518 <_sbrk_r>
 80052e4:	4581      	cmp	r9, r0
 80052e6:	d142      	bne.n	800536e <_malloc_r+0xea>
 80052e8:	6821      	ldr	r1, [r4, #0]
 80052ea:	1a6d      	subs	r5, r5, r1
 80052ec:	4629      	mov	r1, r5
 80052ee:	4630      	mov	r0, r6
 80052f0:	f7ff ffa6 	bl	8005240 <sbrk_aligned>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d03a      	beq.n	800536e <_malloc_r+0xea>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	442b      	add	r3, r5
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	bb62      	cbnz	r2, 8005360 <_malloc_r+0xdc>
 8005306:	f8c8 7000 	str.w	r7, [r8]
 800530a:	e00f      	b.n	800532c <_malloc_r+0xa8>
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	1b52      	subs	r2, r2, r5
 8005310:	d420      	bmi.n	8005354 <_malloc_r+0xd0>
 8005312:	2a0b      	cmp	r2, #11
 8005314:	d917      	bls.n	8005346 <_malloc_r+0xc2>
 8005316:	1961      	adds	r1, r4, r5
 8005318:	42a3      	cmp	r3, r4
 800531a:	6025      	str	r5, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	6059      	strne	r1, [r3, #4]
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	bf08      	it	eq
 8005324:	f8c8 1000 	streq.w	r1, [r8]
 8005328:	5162      	str	r2, [r4, r5]
 800532a:	604b      	str	r3, [r1, #4]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f82f 	bl	8005390 <__malloc_unlock>
 8005332:	f104 000b 	add.w	r0, r4, #11
 8005336:	1d23      	adds	r3, r4, #4
 8005338:	f020 0007 	bic.w	r0, r0, #7
 800533c:	1ac2      	subs	r2, r0, r3
 800533e:	bf1c      	itt	ne
 8005340:	1a1b      	subne	r3, r3, r0
 8005342:	50a3      	strne	r3, [r4, r2]
 8005344:	e7af      	b.n	80052a6 <_malloc_r+0x22>
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	42a3      	cmp	r3, r4
 800534a:	bf0c      	ite	eq
 800534c:	f8c8 2000 	streq.w	r2, [r8]
 8005350:	605a      	strne	r2, [r3, #4]
 8005352:	e7eb      	b.n	800532c <_malloc_r+0xa8>
 8005354:	4623      	mov	r3, r4
 8005356:	6864      	ldr	r4, [r4, #4]
 8005358:	e7ae      	b.n	80052b8 <_malloc_r+0x34>
 800535a:	463c      	mov	r4, r7
 800535c:	687f      	ldr	r7, [r7, #4]
 800535e:	e7b6      	b.n	80052ce <_malloc_r+0x4a>
 8005360:	461a      	mov	r2, r3
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	42a3      	cmp	r3, r4
 8005366:	d1fb      	bne.n	8005360 <_malloc_r+0xdc>
 8005368:	2300      	movs	r3, #0
 800536a:	6053      	str	r3, [r2, #4]
 800536c:	e7de      	b.n	800532c <_malloc_r+0xa8>
 800536e:	230c      	movs	r3, #12
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	4630      	mov	r0, r6
 8005374:	f000 f80c 	bl	8005390 <__malloc_unlock>
 8005378:	e794      	b.n	80052a4 <_malloc_r+0x20>
 800537a:	6005      	str	r5, [r0, #0]
 800537c:	e7d6      	b.n	800532c <_malloc_r+0xa8>
 800537e:	bf00      	nop
 8005380:	20000af8 	.word	0x20000af8

08005384 <__malloc_lock>:
 8005384:	4801      	ldr	r0, [pc, #4]	@ (800538c <__malloc_lock+0x8>)
 8005386:	f7ff bee0 	b.w	800514a <__retarget_lock_acquire_recursive>
 800538a:	bf00      	nop
 800538c:	20000af0 	.word	0x20000af0

08005390 <__malloc_unlock>:
 8005390:	4801      	ldr	r0, [pc, #4]	@ (8005398 <__malloc_unlock+0x8>)
 8005392:	f7ff bedb 	b.w	800514c <__retarget_lock_release_recursive>
 8005396:	bf00      	nop
 8005398:	20000af0 	.word	0x20000af0

0800539c <__sflush_r>:
 800539c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	0716      	lsls	r6, r2, #28
 80053a6:	4605      	mov	r5, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	d454      	bmi.n	8005456 <__sflush_r+0xba>
 80053ac:	684b      	ldr	r3, [r1, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	dc02      	bgt.n	80053b8 <__sflush_r+0x1c>
 80053b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd48      	ble.n	800544a <__sflush_r+0xae>
 80053b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	d045      	beq.n	800544a <__sflush_r+0xae>
 80053be:	2300      	movs	r3, #0
 80053c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053c4:	682f      	ldr	r7, [r5, #0]
 80053c6:	6a21      	ldr	r1, [r4, #32]
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	d030      	beq.n	800542e <__sflush_r+0x92>
 80053cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	0759      	lsls	r1, r3, #29
 80053d2:	d505      	bpl.n	80053e0 <__sflush_r+0x44>
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053da:	b10b      	cbz	r3, 80053e0 <__sflush_r+0x44>
 80053dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b0      	blx	r6
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	d106      	bne.n	80053fe <__sflush_r+0x62>
 80053f0:	6829      	ldr	r1, [r5, #0]
 80053f2:	291d      	cmp	r1, #29
 80053f4:	d82b      	bhi.n	800544e <__sflush_r+0xb2>
 80053f6:	4a2a      	ldr	r2, [pc, #168]	@ (80054a0 <__sflush_r+0x104>)
 80053f8:	40ca      	lsrs	r2, r1
 80053fa:	07d6      	lsls	r6, r2, #31
 80053fc:	d527      	bpl.n	800544e <__sflush_r+0xb2>
 80053fe:	2200      	movs	r2, #0
 8005400:	6062      	str	r2, [r4, #4]
 8005402:	04d9      	lsls	r1, r3, #19
 8005404:	6922      	ldr	r2, [r4, #16]
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	d504      	bpl.n	8005414 <__sflush_r+0x78>
 800540a:	1c42      	adds	r2, r0, #1
 800540c:	d101      	bne.n	8005412 <__sflush_r+0x76>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	b903      	cbnz	r3, 8005414 <__sflush_r+0x78>
 8005412:	6560      	str	r0, [r4, #84]	@ 0x54
 8005414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005416:	602f      	str	r7, [r5, #0]
 8005418:	b1b9      	cbz	r1, 800544a <__sflush_r+0xae>
 800541a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800541e:	4299      	cmp	r1, r3
 8005420:	d002      	beq.n	8005428 <__sflush_r+0x8c>
 8005422:	4628      	mov	r0, r5
 8005424:	f7ff feba 	bl	800519c <_free_r>
 8005428:	2300      	movs	r3, #0
 800542a:	6363      	str	r3, [r4, #52]	@ 0x34
 800542c:	e00d      	b.n	800544a <__sflush_r+0xae>
 800542e:	2301      	movs	r3, #1
 8005430:	4628      	mov	r0, r5
 8005432:	47b0      	blx	r6
 8005434:	4602      	mov	r2, r0
 8005436:	1c50      	adds	r0, r2, #1
 8005438:	d1c9      	bne.n	80053ce <__sflush_r+0x32>
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0c6      	beq.n	80053ce <__sflush_r+0x32>
 8005440:	2b1d      	cmp	r3, #29
 8005442:	d001      	beq.n	8005448 <__sflush_r+0xac>
 8005444:	2b16      	cmp	r3, #22
 8005446:	d11e      	bne.n	8005486 <__sflush_r+0xea>
 8005448:	602f      	str	r7, [r5, #0]
 800544a:	2000      	movs	r0, #0
 800544c:	e022      	b.n	8005494 <__sflush_r+0xf8>
 800544e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005452:	b21b      	sxth	r3, r3
 8005454:	e01b      	b.n	800548e <__sflush_r+0xf2>
 8005456:	690f      	ldr	r7, [r1, #16]
 8005458:	2f00      	cmp	r7, #0
 800545a:	d0f6      	beq.n	800544a <__sflush_r+0xae>
 800545c:	0793      	lsls	r3, r2, #30
 800545e:	680e      	ldr	r6, [r1, #0]
 8005460:	bf08      	it	eq
 8005462:	694b      	ldreq	r3, [r1, #20]
 8005464:	600f      	str	r7, [r1, #0]
 8005466:	bf18      	it	ne
 8005468:	2300      	movne	r3, #0
 800546a:	eba6 0807 	sub.w	r8, r6, r7
 800546e:	608b      	str	r3, [r1, #8]
 8005470:	f1b8 0f00 	cmp.w	r8, #0
 8005474:	dde9      	ble.n	800544a <__sflush_r+0xae>
 8005476:	6a21      	ldr	r1, [r4, #32]
 8005478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800547a:	4643      	mov	r3, r8
 800547c:	463a      	mov	r2, r7
 800547e:	4628      	mov	r0, r5
 8005480:	47b0      	blx	r6
 8005482:	2800      	cmp	r0, #0
 8005484:	dc08      	bgt.n	8005498 <__sflush_r+0xfc>
 8005486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	4407      	add	r7, r0
 800549a:	eba8 0800 	sub.w	r8, r8, r0
 800549e:	e7e7      	b.n	8005470 <__sflush_r+0xd4>
 80054a0:	20400001 	.word	0x20400001

080054a4 <_fflush_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	b913      	cbnz	r3, 80054b4 <_fflush_r+0x10>
 80054ae:	2500      	movs	r5, #0
 80054b0:	4628      	mov	r0, r5
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	b118      	cbz	r0, 80054be <_fflush_r+0x1a>
 80054b6:	6a03      	ldr	r3, [r0, #32]
 80054b8:	b90b      	cbnz	r3, 80054be <_fflush_r+0x1a>
 80054ba:	f7ff fcd7 	bl	8004e6c <__sinit>
 80054be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f3      	beq.n	80054ae <_fflush_r+0xa>
 80054c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054c8:	07d0      	lsls	r0, r2, #31
 80054ca:	d404      	bmi.n	80054d6 <_fflush_r+0x32>
 80054cc:	0599      	lsls	r1, r3, #22
 80054ce:	d402      	bmi.n	80054d6 <_fflush_r+0x32>
 80054d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054d2:	f7ff fe3a 	bl	800514a <__retarget_lock_acquire_recursive>
 80054d6:	4628      	mov	r0, r5
 80054d8:	4621      	mov	r1, r4
 80054da:	f7ff ff5f 	bl	800539c <__sflush_r>
 80054de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054e0:	07da      	lsls	r2, r3, #31
 80054e2:	4605      	mov	r5, r0
 80054e4:	d4e4      	bmi.n	80054b0 <_fflush_r+0xc>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	059b      	lsls	r3, r3, #22
 80054ea:	d4e1      	bmi.n	80054b0 <_fflush_r+0xc>
 80054ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ee:	f7ff fe2d 	bl	800514c <__retarget_lock_release_recursive>
 80054f2:	e7dd      	b.n	80054b0 <_fflush_r+0xc>

080054f4 <fiprintf>:
 80054f4:	b40e      	push	{r1, r2, r3}
 80054f6:	b503      	push	{r0, r1, lr}
 80054f8:	4601      	mov	r1, r0
 80054fa:	ab03      	add	r3, sp, #12
 80054fc:	4805      	ldr	r0, [pc, #20]	@ (8005514 <fiprintf+0x20>)
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 f847 	bl	8005598 <_vfiprintf_r>
 800550a:	b002      	add	sp, #8
 800550c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005510:	b003      	add	sp, #12
 8005512:	4770      	bx	lr
 8005514:	2000001c 	.word	0x2000001c

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	@ (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb ffb0 	bl	8001488 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000aec 	.word	0x20000aec

08005538 <abort>:
 8005538:	b508      	push	{r3, lr}
 800553a:	2006      	movs	r0, #6
 800553c:	f000 fb8c 	bl	8005c58 <raise>
 8005540:	2001      	movs	r0, #1
 8005542:	f7fb ff29 	bl	8001398 <_exit>

08005546 <__sfputc_r>:
 8005546:	6893      	ldr	r3, [r2, #8]
 8005548:	3b01      	subs	r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	b410      	push	{r4}
 800554e:	6093      	str	r3, [r2, #8]
 8005550:	da08      	bge.n	8005564 <__sfputc_r+0x1e>
 8005552:	6994      	ldr	r4, [r2, #24]
 8005554:	42a3      	cmp	r3, r4
 8005556:	db01      	blt.n	800555c <__sfputc_r+0x16>
 8005558:	290a      	cmp	r1, #10
 800555a:	d103      	bne.n	8005564 <__sfputc_r+0x1e>
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	f000 babe 	b.w	8005ae0 <__swbuf_r>
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	1c58      	adds	r0, r3, #1
 8005568:	6010      	str	r0, [r2, #0]
 800556a:	7019      	strb	r1, [r3, #0]
 800556c:	4608      	mov	r0, r1
 800556e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005572:	4770      	bx	lr

08005574 <__sfputs_r>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	4606      	mov	r6, r0
 8005578:	460f      	mov	r7, r1
 800557a:	4614      	mov	r4, r2
 800557c:	18d5      	adds	r5, r2, r3
 800557e:	42ac      	cmp	r4, r5
 8005580:	d101      	bne.n	8005586 <__sfputs_r+0x12>
 8005582:	2000      	movs	r0, #0
 8005584:	e007      	b.n	8005596 <__sfputs_r+0x22>
 8005586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558a:	463a      	mov	r2, r7
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff ffda 	bl	8005546 <__sfputc_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d1f3      	bne.n	800557e <__sfputs_r+0xa>
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005598 <_vfiprintf_r>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	460d      	mov	r5, r1
 800559e:	b09d      	sub	sp, #116	@ 0x74
 80055a0:	4614      	mov	r4, r2
 80055a2:	4698      	mov	r8, r3
 80055a4:	4606      	mov	r6, r0
 80055a6:	b118      	cbz	r0, 80055b0 <_vfiprintf_r+0x18>
 80055a8:	6a03      	ldr	r3, [r0, #32]
 80055aa:	b90b      	cbnz	r3, 80055b0 <_vfiprintf_r+0x18>
 80055ac:	f7ff fc5e 	bl	8004e6c <__sinit>
 80055b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055b2:	07d9      	lsls	r1, r3, #31
 80055b4:	d405      	bmi.n	80055c2 <_vfiprintf_r+0x2a>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	059a      	lsls	r2, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_vfiprintf_r+0x2a>
 80055bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055be:	f7ff fdc4 	bl	800514a <__retarget_lock_acquire_recursive>
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	071b      	lsls	r3, r3, #28
 80055c6:	d501      	bpl.n	80055cc <_vfiprintf_r+0x34>
 80055c8:	692b      	ldr	r3, [r5, #16]
 80055ca:	b99b      	cbnz	r3, 80055f4 <_vfiprintf_r+0x5c>
 80055cc:	4629      	mov	r1, r5
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 fac4 	bl	8005b5c <__swsetup_r>
 80055d4:	b170      	cbz	r0, 80055f4 <_vfiprintf_r+0x5c>
 80055d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055d8:	07dc      	lsls	r4, r3, #31
 80055da:	d504      	bpl.n	80055e6 <_vfiprintf_r+0x4e>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	b01d      	add	sp, #116	@ 0x74
 80055e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	0598      	lsls	r0, r3, #22
 80055ea:	d4f7      	bmi.n	80055dc <_vfiprintf_r+0x44>
 80055ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ee:	f7ff fdad 	bl	800514c <__retarget_lock_release_recursive>
 80055f2:	e7f3      	b.n	80055dc <_vfiprintf_r+0x44>
 80055f4:	2300      	movs	r3, #0
 80055f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f8:	2320      	movs	r3, #32
 80055fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005602:	2330      	movs	r3, #48	@ 0x30
 8005604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057b4 <_vfiprintf_r+0x21c>
 8005608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800560c:	f04f 0901 	mov.w	r9, #1
 8005610:	4623      	mov	r3, r4
 8005612:	469a      	mov	sl, r3
 8005614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005618:	b10a      	cbz	r2, 800561e <_vfiprintf_r+0x86>
 800561a:	2a25      	cmp	r2, #37	@ 0x25
 800561c:	d1f9      	bne.n	8005612 <_vfiprintf_r+0x7a>
 800561e:	ebba 0b04 	subs.w	fp, sl, r4
 8005622:	d00b      	beq.n	800563c <_vfiprintf_r+0xa4>
 8005624:	465b      	mov	r3, fp
 8005626:	4622      	mov	r2, r4
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ffa2 	bl	8005574 <__sfputs_r>
 8005630:	3001      	adds	r0, #1
 8005632:	f000 80a7 	beq.w	8005784 <_vfiprintf_r+0x1ec>
 8005636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005638:	445a      	add	r2, fp
 800563a:	9209      	str	r2, [sp, #36]	@ 0x24
 800563c:	f89a 3000 	ldrb.w	r3, [sl]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 809f 	beq.w	8005784 <_vfiprintf_r+0x1ec>
 8005646:	2300      	movs	r3, #0
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005650:	f10a 0a01 	add.w	sl, sl, #1
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800565c:	931a      	str	r3, [sp, #104]	@ 0x68
 800565e:	4654      	mov	r4, sl
 8005660:	2205      	movs	r2, #5
 8005662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005666:	4853      	ldr	r0, [pc, #332]	@ (80057b4 <_vfiprintf_r+0x21c>)
 8005668:	f7fa fdd2 	bl	8000210 <memchr>
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	b9d8      	cbnz	r0, 80056a8 <_vfiprintf_r+0x110>
 8005670:	06d1      	lsls	r1, r2, #27
 8005672:	bf44      	itt	mi
 8005674:	2320      	movmi	r3, #32
 8005676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800567a:	0713      	lsls	r3, r2, #28
 800567c:	bf44      	itt	mi
 800567e:	232b      	movmi	r3, #43	@ 0x2b
 8005680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005684:	f89a 3000 	ldrb.w	r3, [sl]
 8005688:	2b2a      	cmp	r3, #42	@ 0x2a
 800568a:	d015      	beq.n	80056b8 <_vfiprintf_r+0x120>
 800568c:	9a07      	ldr	r2, [sp, #28]
 800568e:	4654      	mov	r4, sl
 8005690:	2000      	movs	r0, #0
 8005692:	f04f 0c0a 	mov.w	ip, #10
 8005696:	4621      	mov	r1, r4
 8005698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569c:	3b30      	subs	r3, #48	@ 0x30
 800569e:	2b09      	cmp	r3, #9
 80056a0:	d94b      	bls.n	800573a <_vfiprintf_r+0x1a2>
 80056a2:	b1b0      	cbz	r0, 80056d2 <_vfiprintf_r+0x13a>
 80056a4:	9207      	str	r2, [sp, #28]
 80056a6:	e014      	b.n	80056d2 <_vfiprintf_r+0x13a>
 80056a8:	eba0 0308 	sub.w	r3, r0, r8
 80056ac:	fa09 f303 	lsl.w	r3, r9, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	9304      	str	r3, [sp, #16]
 80056b4:	46a2      	mov	sl, r4
 80056b6:	e7d2      	b.n	800565e <_vfiprintf_r+0xc6>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	1d19      	adds	r1, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	9103      	str	r1, [sp, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfbb      	ittet	lt
 80056c4:	425b      	neglt	r3, r3
 80056c6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ca:	9307      	strge	r3, [sp, #28]
 80056cc:	9307      	strlt	r3, [sp, #28]
 80056ce:	bfb8      	it	lt
 80056d0:	9204      	strlt	r2, [sp, #16]
 80056d2:	7823      	ldrb	r3, [r4, #0]
 80056d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80056d6:	d10a      	bne.n	80056ee <_vfiprintf_r+0x156>
 80056d8:	7863      	ldrb	r3, [r4, #1]
 80056da:	2b2a      	cmp	r3, #42	@ 0x2a
 80056dc:	d132      	bne.n	8005744 <_vfiprintf_r+0x1ac>
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	9203      	str	r2, [sp, #12]
 80056e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056ea:	3402      	adds	r4, #2
 80056ec:	9305      	str	r3, [sp, #20]
 80056ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057c4 <_vfiprintf_r+0x22c>
 80056f2:	7821      	ldrb	r1, [r4, #0]
 80056f4:	2203      	movs	r2, #3
 80056f6:	4650      	mov	r0, sl
 80056f8:	f7fa fd8a 	bl	8000210 <memchr>
 80056fc:	b138      	cbz	r0, 800570e <_vfiprintf_r+0x176>
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	eba0 000a 	sub.w	r0, r0, sl
 8005704:	2240      	movs	r2, #64	@ 0x40
 8005706:	4082      	lsls	r2, r0
 8005708:	4313      	orrs	r3, r2
 800570a:	3401      	adds	r4, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005712:	4829      	ldr	r0, [pc, #164]	@ (80057b8 <_vfiprintf_r+0x220>)
 8005714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005718:	2206      	movs	r2, #6
 800571a:	f7fa fd79 	bl	8000210 <memchr>
 800571e:	2800      	cmp	r0, #0
 8005720:	d03f      	beq.n	80057a2 <_vfiprintf_r+0x20a>
 8005722:	4b26      	ldr	r3, [pc, #152]	@ (80057bc <_vfiprintf_r+0x224>)
 8005724:	bb1b      	cbnz	r3, 800576e <_vfiprintf_r+0x1d6>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	3307      	adds	r3, #7
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	3308      	adds	r3, #8
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005734:	443b      	add	r3, r7
 8005736:	9309      	str	r3, [sp, #36]	@ 0x24
 8005738:	e76a      	b.n	8005610 <_vfiprintf_r+0x78>
 800573a:	fb0c 3202 	mla	r2, ip, r2, r3
 800573e:	460c      	mov	r4, r1
 8005740:	2001      	movs	r0, #1
 8005742:	e7a8      	b.n	8005696 <_vfiprintf_r+0xfe>
 8005744:	2300      	movs	r3, #0
 8005746:	3401      	adds	r4, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	4619      	mov	r1, r3
 800574c:	f04f 0c0a 	mov.w	ip, #10
 8005750:	4620      	mov	r0, r4
 8005752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005756:	3a30      	subs	r2, #48	@ 0x30
 8005758:	2a09      	cmp	r2, #9
 800575a:	d903      	bls.n	8005764 <_vfiprintf_r+0x1cc>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0c6      	beq.n	80056ee <_vfiprintf_r+0x156>
 8005760:	9105      	str	r1, [sp, #20]
 8005762:	e7c4      	b.n	80056ee <_vfiprintf_r+0x156>
 8005764:	fb0c 2101 	mla	r1, ip, r1, r2
 8005768:	4604      	mov	r4, r0
 800576a:	2301      	movs	r3, #1
 800576c:	e7f0      	b.n	8005750 <_vfiprintf_r+0x1b8>
 800576e:	ab03      	add	r3, sp, #12
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	462a      	mov	r2, r5
 8005774:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <_vfiprintf_r+0x228>)
 8005776:	a904      	add	r1, sp, #16
 8005778:	4630      	mov	r0, r6
 800577a:	f3af 8000 	nop.w
 800577e:	4607      	mov	r7, r0
 8005780:	1c78      	adds	r0, r7, #1
 8005782:	d1d6      	bne.n	8005732 <_vfiprintf_r+0x19a>
 8005784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005786:	07d9      	lsls	r1, r3, #31
 8005788:	d405      	bmi.n	8005796 <_vfiprintf_r+0x1fe>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	059a      	lsls	r2, r3, #22
 800578e:	d402      	bmi.n	8005796 <_vfiprintf_r+0x1fe>
 8005790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005792:	f7ff fcdb 	bl	800514c <__retarget_lock_release_recursive>
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	065b      	lsls	r3, r3, #25
 800579a:	f53f af1f 	bmi.w	80055dc <_vfiprintf_r+0x44>
 800579e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057a0:	e71e      	b.n	80055e0 <_vfiprintf_r+0x48>
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	462a      	mov	r2, r5
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <_vfiprintf_r+0x228>)
 80057aa:	a904      	add	r1, sp, #16
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 f879 	bl	80058a4 <_printf_i>
 80057b2:	e7e4      	b.n	800577e <_vfiprintf_r+0x1e6>
 80057b4:	08005f8a 	.word	0x08005f8a
 80057b8:	08005f94 	.word	0x08005f94
 80057bc:	00000000 	.word	0x00000000
 80057c0:	08005575 	.word	0x08005575
 80057c4:	08005f90 	.word	0x08005f90

080057c8 <_printf_common>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	4616      	mov	r6, r2
 80057ce:	4698      	mov	r8, r3
 80057d0:	688a      	ldr	r2, [r1, #8]
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfb8      	it	lt
 80057dc:	4613      	movlt	r3, r2
 80057de:	6033      	str	r3, [r6, #0]
 80057e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057e4:	4607      	mov	r7, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	b10a      	cbz	r2, 80057ee <_printf_common+0x26>
 80057ea:	3301      	adds	r3, #1
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	0699      	lsls	r1, r3, #26
 80057f2:	bf42      	ittt	mi
 80057f4:	6833      	ldrmi	r3, [r6, #0]
 80057f6:	3302      	addmi	r3, #2
 80057f8:	6033      	strmi	r3, [r6, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	f015 0506 	ands.w	r5, r5, #6
 8005800:	d106      	bne.n	8005810 <_printf_common+0x48>
 8005802:	f104 0a19 	add.w	sl, r4, #25
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	6832      	ldr	r2, [r6, #0]
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc26      	bgt.n	800585e <_printf_common+0x96>
 8005810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	3b00      	subs	r3, #0
 8005818:	bf18      	it	ne
 800581a:	2301      	movne	r3, #1
 800581c:	0692      	lsls	r2, r2, #26
 800581e:	d42b      	bmi.n	8005878 <_printf_common+0xb0>
 8005820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005824:	4641      	mov	r1, r8
 8005826:	4638      	mov	r0, r7
 8005828:	47c8      	blx	r9
 800582a:	3001      	adds	r0, #1
 800582c:	d01e      	beq.n	800586c <_printf_common+0xa4>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	f003 0306 	and.w	r3, r3, #6
 8005836:	2b04      	cmp	r3, #4
 8005838:	bf02      	ittt	eq
 800583a:	68e5      	ldreq	r5, [r4, #12]
 800583c:	6833      	ldreq	r3, [r6, #0]
 800583e:	1aed      	subeq	r5, r5, r3
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	2600      	movs	r6, #0
 8005854:	341a      	adds	r4, #26
 8005856:	42b5      	cmp	r5, r6
 8005858:	d11a      	bne.n	8005890 <_printf_common+0xc8>
 800585a:	2000      	movs	r0, #0
 800585c:	e008      	b.n	8005870 <_printf_common+0xa8>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4641      	mov	r1, r8
 8005864:	4638      	mov	r0, r7
 8005866:	47c8      	blx	r9
 8005868:	3001      	adds	r0, #1
 800586a:	d103      	bne.n	8005874 <_printf_common+0xac>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	3501      	adds	r5, #1
 8005876:	e7c6      	b.n	8005806 <_printf_common+0x3e>
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	2030      	movs	r0, #48	@ 0x30
 800587e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005882:	4422      	add	r2, r4
 8005884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800588c:	3302      	adds	r3, #2
 800588e:	e7c7      	b.n	8005820 <_printf_common+0x58>
 8005890:	2301      	movs	r3, #1
 8005892:	4622      	mov	r2, r4
 8005894:	4641      	mov	r1, r8
 8005896:	4638      	mov	r0, r7
 8005898:	47c8      	blx	r9
 800589a:	3001      	adds	r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xa4>
 800589e:	3601      	adds	r6, #1
 80058a0:	e7d9      	b.n	8005856 <_printf_common+0x8e>
	...

080058a4 <_printf_i>:
 80058a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	7e0f      	ldrb	r7, [r1, #24]
 80058aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058ac:	2f78      	cmp	r7, #120	@ 0x78
 80058ae:	4691      	mov	r9, r2
 80058b0:	4680      	mov	r8, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	469a      	mov	sl, r3
 80058b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058ba:	d807      	bhi.n	80058cc <_printf_i+0x28>
 80058bc:	2f62      	cmp	r7, #98	@ 0x62
 80058be:	d80a      	bhi.n	80058d6 <_printf_i+0x32>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f000 80d1 	beq.w	8005a68 <_printf_i+0x1c4>
 80058c6:	2f58      	cmp	r7, #88	@ 0x58
 80058c8:	f000 80b8 	beq.w	8005a3c <_printf_i+0x198>
 80058cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058d4:	e03a      	b.n	800594c <_printf_i+0xa8>
 80058d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058da:	2b15      	cmp	r3, #21
 80058dc:	d8f6      	bhi.n	80058cc <_printf_i+0x28>
 80058de:	a101      	add	r1, pc, #4	@ (adr r1, 80058e4 <_printf_i+0x40>)
 80058e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080058cd 	.word	0x080058cd
 80058f0:	080058cd 	.word	0x080058cd
 80058f4:	080058cd 	.word	0x080058cd
 80058f8:	080058cd 	.word	0x080058cd
 80058fc:	08005951 	.word	0x08005951
 8005900:	080058cd 	.word	0x080058cd
 8005904:	080058cd 	.word	0x080058cd
 8005908:	080058cd 	.word	0x080058cd
 800590c:	080058cd 	.word	0x080058cd
 8005910:	08005a4f 	.word	0x08005a4f
 8005914:	0800597b 	.word	0x0800597b
 8005918:	08005a09 	.word	0x08005a09
 800591c:	080058cd 	.word	0x080058cd
 8005920:	080058cd 	.word	0x080058cd
 8005924:	08005a71 	.word	0x08005a71
 8005928:	080058cd 	.word	0x080058cd
 800592c:	0800597b 	.word	0x0800597b
 8005930:	080058cd 	.word	0x080058cd
 8005934:	080058cd 	.word	0x080058cd
 8005938:	08005a11 	.word	0x08005a11
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6032      	str	r2, [r6, #0]
 8005944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800594c:	2301      	movs	r3, #1
 800594e:	e09c      	b.n	8005a8a <_printf_i+0x1e6>
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	1d19      	adds	r1, r3, #4
 8005956:	6031      	str	r1, [r6, #0]
 8005958:	0606      	lsls	r6, r0, #24
 800595a:	d501      	bpl.n	8005960 <_printf_i+0xbc>
 800595c:	681d      	ldr	r5, [r3, #0]
 800595e:	e003      	b.n	8005968 <_printf_i+0xc4>
 8005960:	0645      	lsls	r5, r0, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0xb8>
 8005964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005968:	2d00      	cmp	r5, #0
 800596a:	da03      	bge.n	8005974 <_printf_i+0xd0>
 800596c:	232d      	movs	r3, #45	@ 0x2d
 800596e:	426d      	negs	r5, r5
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005974:	4858      	ldr	r0, [pc, #352]	@ (8005ad8 <_printf_i+0x234>)
 8005976:	230a      	movs	r3, #10
 8005978:	e011      	b.n	800599e <_printf_i+0xfa>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	6833      	ldr	r3, [r6, #0]
 800597e:	0608      	lsls	r0, r1, #24
 8005980:	f853 5b04 	ldr.w	r5, [r3], #4
 8005984:	d402      	bmi.n	800598c <_printf_i+0xe8>
 8005986:	0649      	lsls	r1, r1, #25
 8005988:	bf48      	it	mi
 800598a:	b2ad      	uxthmi	r5, r5
 800598c:	2f6f      	cmp	r7, #111	@ 0x6f
 800598e:	4852      	ldr	r0, [pc, #328]	@ (8005ad8 <_printf_i+0x234>)
 8005990:	6033      	str	r3, [r6, #0]
 8005992:	bf14      	ite	ne
 8005994:	230a      	movne	r3, #10
 8005996:	2308      	moveq	r3, #8
 8005998:	2100      	movs	r1, #0
 800599a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800599e:	6866      	ldr	r6, [r4, #4]
 80059a0:	60a6      	str	r6, [r4, #8]
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	db05      	blt.n	80059b2 <_printf_i+0x10e>
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	432e      	orrs	r6, r5
 80059aa:	f021 0104 	bic.w	r1, r1, #4
 80059ae:	6021      	str	r1, [r4, #0]
 80059b0:	d04b      	beq.n	8005a4a <_printf_i+0x1a6>
 80059b2:	4616      	mov	r6, r2
 80059b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80059b8:	fb03 5711 	mls	r7, r3, r1, r5
 80059bc:	5dc7      	ldrb	r7, [r0, r7]
 80059be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059c2:	462f      	mov	r7, r5
 80059c4:	42bb      	cmp	r3, r7
 80059c6:	460d      	mov	r5, r1
 80059c8:	d9f4      	bls.n	80059b4 <_printf_i+0x110>
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d10b      	bne.n	80059e6 <_printf_i+0x142>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	07df      	lsls	r7, r3, #31
 80059d2:	d508      	bpl.n	80059e6 <_printf_i+0x142>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	6861      	ldr	r1, [r4, #4]
 80059d8:	4299      	cmp	r1, r3
 80059da:	bfde      	ittt	le
 80059dc:	2330      	movle	r3, #48	@ 0x30
 80059de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059e6:	1b92      	subs	r2, r2, r6
 80059e8:	6122      	str	r2, [r4, #16]
 80059ea:	f8cd a000 	str.w	sl, [sp]
 80059ee:	464b      	mov	r3, r9
 80059f0:	aa03      	add	r2, sp, #12
 80059f2:	4621      	mov	r1, r4
 80059f4:	4640      	mov	r0, r8
 80059f6:	f7ff fee7 	bl	80057c8 <_printf_common>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d14a      	bne.n	8005a94 <_printf_i+0x1f0>
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005a02:	b004      	add	sp, #16
 8005a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	f043 0320 	orr.w	r3, r3, #32
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	4832      	ldr	r0, [pc, #200]	@ (8005adc <_printf_i+0x238>)
 8005a12:	2778      	movs	r7, #120	@ 0x78
 8005a14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	061f      	lsls	r7, r3, #24
 8005a1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a22:	d402      	bmi.n	8005a2a <_printf_i+0x186>
 8005a24:	065f      	lsls	r7, r3, #25
 8005a26:	bf48      	it	mi
 8005a28:	b2ad      	uxthmi	r5, r5
 8005a2a:	6031      	str	r1, [r6, #0]
 8005a2c:	07d9      	lsls	r1, r3, #31
 8005a2e:	bf44      	itt	mi
 8005a30:	f043 0320 	orrmi.w	r3, r3, #32
 8005a34:	6023      	strmi	r3, [r4, #0]
 8005a36:	b11d      	cbz	r5, 8005a40 <_printf_i+0x19c>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	e7ad      	b.n	8005998 <_printf_i+0xf4>
 8005a3c:	4826      	ldr	r0, [pc, #152]	@ (8005ad8 <_printf_i+0x234>)
 8005a3e:	e7e9      	b.n	8005a14 <_printf_i+0x170>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	f023 0320 	bic.w	r3, r3, #32
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	e7f6      	b.n	8005a38 <_printf_i+0x194>
 8005a4a:	4616      	mov	r6, r2
 8005a4c:	e7bd      	b.n	80059ca <_printf_i+0x126>
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	6825      	ldr	r5, [r4, #0]
 8005a52:	6961      	ldr	r1, [r4, #20]
 8005a54:	1d18      	adds	r0, r3, #4
 8005a56:	6030      	str	r0, [r6, #0]
 8005a58:	062e      	lsls	r6, r5, #24
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	d501      	bpl.n	8005a62 <_printf_i+0x1be>
 8005a5e:	6019      	str	r1, [r3, #0]
 8005a60:	e002      	b.n	8005a68 <_printf_i+0x1c4>
 8005a62:	0668      	lsls	r0, r5, #25
 8005a64:	d5fb      	bpl.n	8005a5e <_printf_i+0x1ba>
 8005a66:	8019      	strh	r1, [r3, #0]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	e7bc      	b.n	80059ea <_printf_i+0x146>
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	6032      	str	r2, [r6, #0]
 8005a76:	681e      	ldr	r6, [r3, #0]
 8005a78:	6862      	ldr	r2, [r4, #4]
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7fa fbc7 	bl	8000210 <memchr>
 8005a82:	b108      	cbz	r0, 8005a88 <_printf_i+0x1e4>
 8005a84:	1b80      	subs	r0, r0, r6
 8005a86:	6060      	str	r0, [r4, #4]
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a92:	e7aa      	b.n	80059ea <_printf_i+0x146>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	4632      	mov	r2, r6
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	47d0      	blx	sl
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d0ad      	beq.n	80059fe <_printf_i+0x15a>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	079b      	lsls	r3, r3, #30
 8005aa6:	d413      	bmi.n	8005ad0 <_printf_i+0x22c>
 8005aa8:	68e0      	ldr	r0, [r4, #12]
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	4298      	cmp	r0, r3
 8005aae:	bfb8      	it	lt
 8005ab0:	4618      	movlt	r0, r3
 8005ab2:	e7a6      	b.n	8005a02 <_printf_i+0x15e>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4632      	mov	r2, r6
 8005ab8:	4649      	mov	r1, r9
 8005aba:	4640      	mov	r0, r8
 8005abc:	47d0      	blx	sl
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d09d      	beq.n	80059fe <_printf_i+0x15a>
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	68e3      	ldr	r3, [r4, #12]
 8005ac6:	9903      	ldr	r1, [sp, #12]
 8005ac8:	1a5b      	subs	r3, r3, r1
 8005aca:	42ab      	cmp	r3, r5
 8005acc:	dcf2      	bgt.n	8005ab4 <_printf_i+0x210>
 8005ace:	e7eb      	b.n	8005aa8 <_printf_i+0x204>
 8005ad0:	2500      	movs	r5, #0
 8005ad2:	f104 0619 	add.w	r6, r4, #25
 8005ad6:	e7f5      	b.n	8005ac4 <_printf_i+0x220>
 8005ad8:	08005f9b 	.word	0x08005f9b
 8005adc:	08005fac 	.word	0x08005fac

08005ae0 <__swbuf_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b118      	cbz	r0, 8005af2 <__swbuf_r+0x12>
 8005aea:	6a03      	ldr	r3, [r0, #32]
 8005aec:	b90b      	cbnz	r3, 8005af2 <__swbuf_r+0x12>
 8005aee:	f7ff f9bd 	bl	8004e6c <__sinit>
 8005af2:	69a3      	ldr	r3, [r4, #24]
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	071a      	lsls	r2, r3, #28
 8005afa:	d501      	bpl.n	8005b00 <__swbuf_r+0x20>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	b943      	cbnz	r3, 8005b12 <__swbuf_r+0x32>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f82a 	bl	8005b5c <__swsetup_r>
 8005b08:	b118      	cbz	r0, 8005b12 <__swbuf_r+0x32>
 8005b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0e:	4638      	mov	r0, r7
 8005b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	1a98      	subs	r0, r3, r2
 8005b18:	6963      	ldr	r3, [r4, #20]
 8005b1a:	b2f6      	uxtb	r6, r6
 8005b1c:	4283      	cmp	r3, r0
 8005b1e:	4637      	mov	r7, r6
 8005b20:	dc05      	bgt.n	8005b2e <__swbuf_r+0x4e>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f7ff fcbd 	bl	80054a4 <_fflush_r>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d1ed      	bne.n	8005b0a <__swbuf_r+0x2a>
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	6022      	str	r2, [r4, #0]
 8005b3a:	701e      	strb	r6, [r3, #0]
 8005b3c:	6962      	ldr	r2, [r4, #20]
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d004      	beq.n	8005b4e <__swbuf_r+0x6e>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	07db      	lsls	r3, r3, #31
 8005b48:	d5e1      	bpl.n	8005b0e <__swbuf_r+0x2e>
 8005b4a:	2e0a      	cmp	r6, #10
 8005b4c:	d1df      	bne.n	8005b0e <__swbuf_r+0x2e>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff fca7 	bl	80054a4 <_fflush_r>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0d9      	beq.n	8005b0e <__swbuf_r+0x2e>
 8005b5a:	e7d6      	b.n	8005b0a <__swbuf_r+0x2a>

08005b5c <__swsetup_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <__swsetup_r+0xa8>)
 8005b60:	4605      	mov	r5, r0
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	460c      	mov	r4, r1
 8005b66:	b118      	cbz	r0, 8005b70 <__swsetup_r+0x14>
 8005b68:	6a03      	ldr	r3, [r0, #32]
 8005b6a:	b90b      	cbnz	r3, 8005b70 <__swsetup_r+0x14>
 8005b6c:	f7ff f97e 	bl	8004e6c <__sinit>
 8005b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b74:	0719      	lsls	r1, r3, #28
 8005b76:	d422      	bmi.n	8005bbe <__swsetup_r+0x62>
 8005b78:	06da      	lsls	r2, r3, #27
 8005b7a:	d407      	bmi.n	8005b8c <__swsetup_r+0x30>
 8005b7c:	2209      	movs	r2, #9
 8005b7e:	602a      	str	r2, [r5, #0]
 8005b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8a:	e033      	b.n	8005bf4 <__swsetup_r+0x98>
 8005b8c:	0758      	lsls	r0, r3, #29
 8005b8e:	d512      	bpl.n	8005bb6 <__swsetup_r+0x5a>
 8005b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b92:	b141      	cbz	r1, 8005ba6 <__swsetup_r+0x4a>
 8005b94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d002      	beq.n	8005ba2 <__swsetup_r+0x46>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f7ff fafd 	bl	800519c <_free_r>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0308 	orr.w	r3, r3, #8
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	b94b      	cbnz	r3, 8005bd6 <__swsetup_r+0x7a>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bcc:	d003      	beq.n	8005bd6 <__swsetup_r+0x7a>
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 f883 	bl	8005cdc <__smakebuf_r>
 8005bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bda:	f013 0201 	ands.w	r2, r3, #1
 8005bde:	d00a      	beq.n	8005bf6 <__swsetup_r+0x9a>
 8005be0:	2200      	movs	r2, #0
 8005be2:	60a2      	str	r2, [r4, #8]
 8005be4:	6962      	ldr	r2, [r4, #20]
 8005be6:	4252      	negs	r2, r2
 8005be8:	61a2      	str	r2, [r4, #24]
 8005bea:	6922      	ldr	r2, [r4, #16]
 8005bec:	b942      	cbnz	r2, 8005c00 <__swsetup_r+0xa4>
 8005bee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bf2:	d1c5      	bne.n	8005b80 <__swsetup_r+0x24>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	0799      	lsls	r1, r3, #30
 8005bf8:	bf58      	it	pl
 8005bfa:	6962      	ldrpl	r2, [r4, #20]
 8005bfc:	60a2      	str	r2, [r4, #8]
 8005bfe:	e7f4      	b.n	8005bea <__swsetup_r+0x8e>
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7f7      	b.n	8005bf4 <__swsetup_r+0x98>
 8005c04:	2000001c 	.word	0x2000001c

08005c08 <_raise_r>:
 8005c08:	291f      	cmp	r1, #31
 8005c0a:	b538      	push	{r3, r4, r5, lr}
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	d904      	bls.n	8005c1c <_raise_r+0x14>
 8005c12:	2316      	movs	r3, #22
 8005c14:	6003      	str	r3, [r0, #0]
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c1e:	b112      	cbz	r2, 8005c26 <_raise_r+0x1e>
 8005c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c24:	b94b      	cbnz	r3, 8005c3a <_raise_r+0x32>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f830 	bl	8005c8c <_getpid_r>
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4628      	mov	r0, r5
 8005c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c36:	f000 b817 	b.w	8005c68 <_kill_r>
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d00a      	beq.n	8005c54 <_raise_r+0x4c>
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	d103      	bne.n	8005c4a <_raise_r+0x42>
 8005c42:	2316      	movs	r3, #22
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	2001      	movs	r0, #1
 8005c48:	e7e7      	b.n	8005c1a <_raise_r+0x12>
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c50:	4620      	mov	r0, r4
 8005c52:	4798      	blx	r3
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7e0      	b.n	8005c1a <_raise_r+0x12>

08005c58 <raise>:
 8005c58:	4b02      	ldr	r3, [pc, #8]	@ (8005c64 <raise+0xc>)
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	f7ff bfd3 	b.w	8005c08 <_raise_r>
 8005c62:	bf00      	nop
 8005c64:	2000001c 	.word	0x2000001c

08005c68 <_kill_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	@ (8005c88 <_kill_r+0x20>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	f7fb fb7f 	bl	8001378 <_kill>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	d102      	bne.n	8005c84 <_kill_r+0x1c>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	b103      	cbz	r3, 8005c84 <_kill_r+0x1c>
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20000aec 	.word	0x20000aec

08005c8c <_getpid_r>:
 8005c8c:	f7fb bb6c 	b.w	8001368 <_getpid>

08005c90 <__swhatbuf_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	460c      	mov	r4, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	b096      	sub	sp, #88	@ 0x58
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	461e      	mov	r6, r3
 8005ca0:	da0d      	bge.n	8005cbe <__swhatbuf_r+0x2e>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2340      	movne	r3, #64	@ 0x40
 8005cb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	6031      	str	r1, [r6, #0]
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	b016      	add	sp, #88	@ 0x58
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f000 f848 	bl	8005d54 <_fstat_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	dbec      	blt.n	8005ca2 <__swhatbuf_r+0x12>
 8005cc8:	9901      	ldr	r1, [sp, #4]
 8005cca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cd2:	4259      	negs	r1, r3
 8005cd4:	4159      	adcs	r1, r3
 8005cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cda:	e7eb      	b.n	8005cb4 <__swhatbuf_r+0x24>

08005cdc <__smakebuf_r>:
 8005cdc:	898b      	ldrh	r3, [r1, #12]
 8005cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce0:	079d      	lsls	r5, r3, #30
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	d507      	bpl.n	8005cf8 <__smakebuf_r+0x1c>
 8005ce8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	6163      	str	r3, [r4, #20]
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	ab01      	add	r3, sp, #4
 8005cfa:	466a      	mov	r2, sp
 8005cfc:	f7ff ffc8 	bl	8005c90 <__swhatbuf_r>
 8005d00:	9f00      	ldr	r7, [sp, #0]
 8005d02:	4605      	mov	r5, r0
 8005d04:	4639      	mov	r1, r7
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff fabc 	bl	8005284 <_malloc_r>
 8005d0c:	b948      	cbnz	r0, 8005d22 <__smakebuf_r+0x46>
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	059a      	lsls	r2, r3, #22
 8005d14:	d4ee      	bmi.n	8005cf4 <__smakebuf_r+0x18>
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	e7e2      	b.n	8005ce8 <__smakebuf_r+0xc>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	6020      	str	r0, [r4, #0]
 8005d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	9b01      	ldr	r3, [sp, #4]
 8005d2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d32:	b15b      	cbz	r3, 8005d4c <__smakebuf_r+0x70>
 8005d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 f81d 	bl	8005d78 <_isatty_r>
 8005d3e:	b128      	cbz	r0, 8005d4c <__smakebuf_r+0x70>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	431d      	orrs	r5, r3
 8005d50:	81a5      	strh	r5, [r4, #12]
 8005d52:	e7cf      	b.n	8005cf4 <__smakebuf_r+0x18>

08005d54 <_fstat_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	@ (8005d74 <_fstat_r+0x20>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	f7fb fb69 	bl	8001438 <_fstat>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d102      	bne.n	8005d70 <_fstat_r+0x1c>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	b103      	cbz	r3, 8005d70 <_fstat_r+0x1c>
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	bf00      	nop
 8005d74:	20000aec 	.word	0x20000aec

08005d78 <_isatty_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	@ (8005d94 <_isatty_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fb68 	bl	8001458 <_isatty>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_isatty_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_isatty_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000aec 	.word	0x20000aec

08005d98 <_init>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr

08005da4 <_fini>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr
