// server.c
// 아주 간단한 C 웹서버 (libmicrohttpd 사용)
// URL:
//   GET  /dashboard        -> 대시보드 HTML
//   GET  /api/snapshot     -> 주문 목록(JSON)
//   POST /api/orders       -> 주문 생성
//   POST /api/orders/status-> 주문 상태 변경
//
// 빌드: gcc -O2 -Wall -std=c11 -o server server.c -lmicrohttpd
// 실행: ./server 8080
// 접속: http://서버IP:8080/dashboard

#define _POSIX_C_SOURCE 200112L



#include <microhttpd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define PORT_DEFAULT 8080
#define MAX_ORDERS 100

typedef struct {
    int id;
    int table_no;
    char items[128];
    char note[128];
    char status[32];
    char created_at[64];
    int used;
} Order;

static Order ORDERS[MAX_ORDERS];
static int ORDER_SEQ = 1;

// 시간 문자열 (ISO8601)
static void now_iso(char *buf, size_t n) {
    time_t t = time(NULL);
    struct tm tm;
    gmtime_r(&t, &tm);
    strftime(buf, n, "%Y-%m-%dT%H:%M:%SZ", &tm);
}

// 주문 추가
static int add_order(int table_no, const char *items, const char *note) {
    for (int i = 0; i < MAX_ORDERS; i++) {
        if (!ORDERS[i].used) {
            ORDERS[i].used = 1;
            ORDERS[i].id = ORDER_SEQ++;
            ORDERS[i].table_no = table_no;
            snprintf(ORDERS[i].items, sizeof(ORDERS[i].items), "%s", items ? items : "");
            snprintf(ORDERS[i].note, sizeof(ORDERS[i].note), "%s", note ? note : "");
            snprintf(ORDERS[i].status, sizeof(ORDERS[i].status), "received");
            now_iso(ORDERS[i].created_at, sizeof(ORDERS[i].created_at));
            return ORDERS[i].id;
        }
    }
    return -1;
}

// JSON 응답 헬퍼
static int send_response(struct MHD_Connection *conn,
                         const char *content,
                         int status,
                         const char *ctype) {
    struct MHD_Response *resp =
        MHD_create_response_from_buffer(strlen(content),
                                        (void*) content,
                                        MHD_RESPMEM_MUST_COPY);
    if (!resp) return MHD_NO;
    MHD_add_response_header(resp, "Content-Type", ctype);
    int ret = MHD_queue_response(conn, status, resp);
    MHD_destroy_response(resp);
    return ret;
}

// 요청 처리
static enum  MHD_Result handler(void *cls,
                   struct MHD_Connection *conn,
                   const char *url,
                   const char *method,
                   const char *ver,
                   const char *upload_data,
                   size_t *upload_size,
                   void **ptr) {
    (void)cls; (void)ver; (void)upload_data; (void)upload_size; (void)ptr;

    if (strcmp(method, "GET") == 0 && strcmp(url, "/dashboard") == 0) {
        const char *html =
            "<html><head><title>Dashboard</title></head><body>"
            "<h1>스마트 레스토랑 주문 현황</h1>"
            "<p>GET /api/snapshot 으로 주문 목록 확인</p>"
            "</body></html>";
        return send_response(conn, html, MHD_HTTP_OK,"text/html; charset=utf-8"  );
    }

    if (strcmp(method, "GET") == 0 && strcmp(url, "/api/snapshot") == 0) {
        char buf[4096];
        int pos = 0;
        pos += snprintf(buf + pos, sizeof(buf) - pos, "{\"orders\":[");
        int first = 1;
        for (int i = 0; i < MAX_ORDERS; i++) {
            if (!ORDERS[i].used) continue;
            if (!first) pos += snprintf(buf + pos, sizeof(buf) - pos, ",");
            first = 0;
            pos += snprintf(buf + pos, sizeof(buf) - pos,
                "{\"id\":%d,\"table\":%d,\"items\":\"%s\",\"note\":\"%s\",\"status\":\"%s\",\"created_at\":\"%s\"}",
                ORDERS[i].id, ORDERS[i].table_no, ORDERS[i].items, ORDERS[i].note, ORDERS[i].status, ORDERS[i].created_at);
        }
        pos += snprintf(buf + pos, sizeof(buf) - pos, "]}");
        return send_response(conn, buf, MHD_HTTP_OK, "application/json; charset=utf-8");
    }

    if (strcmp(method, "POST") == 0 && strcmp(url, "/api/orders") == 0) {
        // 데모용: 항상 테이블 1, 메뉴 "ramen" 추가
        int id = add_order(1, "ramen × 1", "");
        if (id < 0) return send_response(conn, "{\"error\":\"full\"}", 500, "application/json");
        return send_response(conn, "{\"ok\":true}", MHD_HTTP_OK, "application/json");
    }

    return send_response(conn, "{\"error\":\"not found\"}", MHD_HTTP_NOT_FOUND, "application/json");
}

int main(int argc, char *argv[]) {
    int port = PORT_DEFAULT;
    if (argc > 1) port = atoi(argv[1]);

    struct MHD_Daemon *daemon =
        MHD_start_daemon(MHD_USE_SELECT_INTERNALLY,
                         port,
                         NULL, NULL,
                         &handler, NULL,
                         MHD_OPTION_END);
    if (!daemon) {
        fprintf(stderr, "서버 시작 실패\n");
        return 1;
    }

    printf("서버 실행 중: http://0.0.0.0:%d\n", port);
    getchar(); // 엔터 누르면 종료
    MHD_stop_daemon(daemon);
    return 0;
}

